

==================================================
PAGE: index
URL: https://docs.cline.bot/
==================================================

TITLE: Cline Documentation | Cline


H1 HEADINGS:
Cline Documentation

H2 HEADINGS:
Getting Started
Improving Your Prompting Skills
Exploring Cline's Tools
Enterprise Solutions
Contributing to Cline
Additional Resources

CONTENT:
Last updated18 hours ago

Welcome to the Cline documentation - your comprehensive guide to using and extending Cline's capabilities. Here you'll find resources to help you get started, improve your skills, and contribute to the project.

New to coding?We've prepared a gentle introduction:

Want to communicate more effectively with Cline?Explore:

Understand Cline's capabilities:

Extend Cline with MCP Servers:

Using Cline at the corporate level

Interested in contributing?We welcome your input:

Feel free to submit a pull request

We're always looking to improve this documentation. If you have suggestions or find areas that could be enhanced, please let us know. Your feedback helps make Cline better for everyone!

Join our

Cline GitHub Repository:

MCP Documentation:


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Getting Started
- Improving Your Prompting Skills
- Exploring Cline's Tools
- Enterprise Solutions
- Contributing to Cline
- Additional Resources

- 
- New to coding?We've prepared a gentle introduction:
- 

- Want to communicate more effectively with Cline?Explore:

- 
- 

- Understand Cline's capabilities:
- Extend Cline with MCP Servers:

- 
- 
- 

- 
- 
- 

- Using Cline at the corporate level

- 
- 
- 
- 

- Interested in contributing?We welcome your input:Feel free to submit a pull request

- Feel free to submit a pull request
- 
- 

- 
- 



==================================================
PAGE: getting-started/what-is-cline
URL: https://docs.cline.bot/getting-started/what-is-cline
==================================================

TITLE: What is Cline? | Cline


H1 HEADINGS:
What is Cline?

CONTENT:
Cline is an AI development assistant which integrates with Microsoft Visual Studio Code. It provides an interface between your IDE and LLMs facilitating code development, increasing productivity and lowering the barrier to entry for new coders. Depending on permissions, Cline can read/write files, execute commands, use your web browser, and expand its capabilities with Model Context Protocol servers.

What makes Cline distinctive is its thoughtful approach to code generation and its extensive integration capabilities. Rather than simply generating code snippets, Cline collaborates with developers by planning solutions step-by-step, maintaining awareness of the entire development environment, and requiring explicit approval for all changes. It can understand large codebases, accelerate onboarding for new engineers, and connect with hundreds of tools through its Model Context Protocol Marketplace, enabling everything from streamlined project deployments to automated incident response‚Äîall through natural language commands.

Last updated4 days ago


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry


LISTS:
- Getting Started



==================================================
PAGE: getting-started/for-new-coders
URL: https://docs.cline.bot/getting-started/for-new-coders
==================================================

TITLE: For New Coders | Cline


H1 HEADINGS:
For New Coders

H3 HEADINGS:
üöÄ Getting Started

H4 HEADINGS:
1.VS Code
2.Essential Development Tools
3.Organize Your Projects
4.Install the Cline VS Code Extension

CONTENT:
Welcome to Cline, your AI-powered coding companion! This guide will help you quickly set up your development environment and begin your coding journey with ease.

Last updated7 days ago

üí°Tip:If you're completely new to coding, take your time with each step. There's no rush ‚Äî Cline is here to guide you!

Before you jump into coding, make sure you have these essentials ready:

A popular, free, and powerful code editor.

üì∫Recommended YouTube Tutorial:

‚úÖPro Tip:Install VS Code in your Applications folder (macOS) or Program Files (Windows) for easy access from your dock or start menu.

Basic software required for coding efficiently:

Homebrew (macOS)

Node.js

üëâ Follow our detailed guide on Installing Essential Development Tools with step-by-step help from Cline.

üì∫Recommended YouTube Tutorials:

For macOS:

For Windows:

‚ö†Ô∏èNote:If you run into permission issues during installation, try running your terminal or command prompt as an administrator.

Create a dedicated folder namedClinein your Documents folder for all your coding projects:

macOS:/Users/[your-username]/Documents/Cline

Windows:C:\Users\[your-username]\Documents\Cline

Inside yourClinefolder, structure projects clearly:

Documents/Cline/workout-app(e.g., for a fitness tracking app)

Documents/Cline/portfolio-website(e.g., to showcase your work)

üí°Tip:Keeping your projects organized from the start will save you time and confusion later!

Enhance your coding workflow by installing the Cline extension directly within VS Code:

Get Started with Cline Extension Tutorial

‚úÖPro Tip:After installing, reload VS Code to ensure the extension is activated properly.

üéâ You're all set! Dive in and start coding smarter and faster withCline.

üì∫Recommended YouTube Tutorial:


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Homebrew (macOS)
- Node.js
- Git

- For macOS:
- For Windows:

- 
- 
- 

- 
- 

- macOS:/Users/[your-username]/Documents/Cline
- Windows:C:\Users\[your-username]\Documents\Cline

- Documents/Cline/workout-app(e.g., for a fitness tracking app)
- Documents/Cline/portfolio-website(e.g., to showcase your work)

- Get Started with Cline Extension Tutorial


LISTS:
- Getting Started


CODE EXAMPLES:
```
Cline
```

```
/Users/[your-username]/Documents/Cline
```

```
C:\Users\[your-username]\Documents\Cline
```

```
Cline
```

```
Documents/Cline/workout-app
```

```
Documents/Cline/portfolio-website
```



==================================================
PAGE: getting-started/installing-cline
URL: https://docs.cline.bot/getting-started/installing-cline
==================================================

TITLE: Installing Cline | Cline


H1 HEADINGS:
Installing Cline

H3 HEADINGS:
Installation Options
üõ†Ô∏è VS Code Marketplace: Step-by-Step Setup
üåê Open VSX Registry
üë§ Creating Your Cline Account
üíª Your First Interaction with Cline
üß© Tips for Working with Cline
ü´Ç Still Struggling?

CONTENT:
Cline is a VS Code extension that brings AI-powered coding assistance directly to your editor. Install using one of these methods:

Last updated7 days ago

VS Code Marketplace (Recommended):Fastest method for standard VS Code and Cursor users.

Open VSX Registry:For VS Code-compatible editors like VSCodium.

Follow these steps to get Cline up and running:

Open VS Code:Launch the VS Code application.

‚ö†Ô∏èNote:If VS Code shows "Running extensions might...", click "Allow".

Open Your Cline Folder:In VS Code, open the Cline folder you created in Documents.

Navigate to Extensions:Click on the Extensions icon in the Activity Bar on the side of VS Code (Ctrl + Shift + XorCmd + Shift + X).

Search for 'Cline':In the Extensions search bar, typeCline.

Install the Extension:Click the "Install" button next to the Cline extension.

Open Cline:

Click the Cline icon in the Activity Bar.

Or, use the command palette (Ctrl/Cmd + Shift + P) and type "Cline: Open In New Tab" for a better view.

Troubleshooting:If you don't see the Cline icon, try restarting VS Code.

‚úÖPro Tip:You should see the Cline chat window appear in your VS Code editor!

For VS Code-compatible editors without Marketplace access (like VSCodium and Windsurf):

Open your editor.

Access the Extensions view.

Search for "Cline".

Select "Cline" by saoudrizwan and clickInstall.

Reload if prompted.

Now that you have Cline installed, let's get you set up with your account:

Sign In to Cline:

Click theSign Inbutton in the Cline extension.

Start with Free Credits:

No credit card needed!

Available AI Models:

Anthropic Claude 3.5-Sonnet (recommended for coding)

DeepSeek Chat (cost-effective alternative)

Google Gemini 2.0 Flash

And more ‚Äî all through your Cline account.

You're ready to start building! Copy and paste this prompt into the Cline chat window:

‚úÖPro Tip:Cline will help you create the project folder and set up your first webpage!

Ask Questions:If you're unsure about something, ask Cline!

Use Screenshots:Cline can understand images ‚Äî show him what you're working on.

Copy and Paste Errors:Share error messages in the chat for solutions.

Speak Plainly:Use your own words ‚Äî Cline will translate them into code.

Join our Discord community and engage with our team and other Cline users directly.

You'll be taken toto create your account.


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Installation Options
- üõ†Ô∏è VS Code Marketplace: Step-by-Step Setup
- üåê Open VSX Registry
- üë§ Creating Your Cline Account
- üíª Your First Interaction with Cline
- üß© Tips for Working with Cline
- ü´Ç Still Struggling?

- VS Code Marketplace (Recommended):Fastest method for standard VS Code and Cursor users.
- Open VSX Registry:For VS Code-compatible editors like VSCodium.

- Click the Cline icon in the Activity Bar.
- Or, use the command palette (Ctrl/Cmd + Shift + P) and type "Cline: Open In New Tab" for a better view.

- Click theSign Inbutton in the Cline extension.
- 

- No credit card needed!

- Anthropic Claude 3.5-Sonnet (recommended for coding)
- DeepSeek Chat (cost-effective alternative)
- Google Gemini 2.0 Flash
- And more ‚Äî all through your Cline account.

- Ask Questions:If you're unsure about something, ask Cline!
- Use Screenshots:Cline can understand images ‚Äî show him what you're working on.
- Copy and Paste Errors:Share error messages in the chat for solutions.
- Speak Plainly:Use your own words ‚Äî Cline will translate them into code.


LISTS:
- Getting Started

- Open VS Code:Launch the VS Code application.‚ö†Ô∏èNote:If VS Code shows "Running extensions might...", click "Allow".
- Open Your Cline Folder:In VS Code, open the Cline folder you created in Documents.
- Navigate to Extensions:Click on the Extensions icon in the Activity Bar on the side of VS Code (Ctrl + Shift + XorCmd + Shift + X).
- Search for 'Cline':In the Extensions search bar, typeCline.

- Install the Extension:Click the "Install" button next to the Cline extension.
- Open Cline:Click the Cline icon in the Activity Bar.Or, use the command palette (Ctrl/Cmd + Shift + P) and type "Cline: Open In New Tab" for a better view.
- Troubleshooting:If you don't see the Cline icon, try restarting VS Code.

- Open your editor.
- Access the Extensions view.
- Search for "Cline".
- Select "Cline" by saoudrizwan and clickInstall.
- Reload if prompted.

- Sign In to Cline:Click theSign Inbutton in the Cline extension.
- Start with Free Credits:No credit card needed!
- Available AI Models:Anthropic Claude 3.5-Sonnet (recommended for coding)DeepSeek Chat (cost-effective alternative)Google Gemini 2.0 FlashAnd more ‚Äî all through your Cline account.
- 


CODE EXAMPLES:
```
Ctrl + Shift + X
```

```
Cmd + Shift + X
```

```
Cline
```

```
Ctrl/Cmd + Shift + P
```

```
Hey Cline! Could you help me create a new project folder called "hello-world" in my Cline directory and make a simple webpage that says "Hello World" in big blue text?
```



==================================================
PAGE: getting-started/installing-dev-essentials
URL: https://docs.cline.bot/getting-started/installing-dev-essentials
==================================================

TITLE: Installing Dev Essentials | Cline


H1 HEADINGS:
Installing Dev Essentials

H3 HEADINGS:
üß∞ The Essential Tools
üöÄ Let Cline Install Everything
üîç What Will Happen
üí° Why These Tools Are Important
üß© Notes
üßë‚Äçüíª Additional Tips for New Coders

H4 HEADINGS:
For macOS
For Windows
For Linux
Understanding the Terminal
Understanding VS Code Features
Common Features

CONTENT:
When you start coding, you'll need some essential development tools installed on your computer. Cline can help you install everything you need in a safe, guided way.

Here are the core tools you'll need for development:

Node.js & npm:Required for JavaScript and web development

Git:For tracking changes in your code and collaborating with others

Package Managers:Tools that make it easy to install other development tools

Homebrew for macOS

Chocolatey for Windows

apt/yum for Linux

üí°Tip:These tools are the foundation of your developer toolkit. Installing them properly will set you up for success!

Copy one of these prompts based on your operating system and paste it intoCline:

‚úÖPro Tip:Cline will show you each command before running it. You stay in control the entire time!

Cline will guide you through the following steps:

Installing the appropriate package manager for your system

Using the package manager to install Node.js and Git

Showing you the exact command before it runs (you approve each step!)

Verifying each installation is successful

‚ö†Ô∏èNote:You might need to enter your computer's password for some installations. This is normal!

Node.js & npm:

Build websites with frameworks like React or Next.js

Run JavaScript code

Install JavaScript packages

Git:

Save different versions of your code

Collaborate with other developers

Back up your work

Package Managers:

Quickly install and update development tools

Keep your environment organized and up to date

üí°Tip:The installation process is interactive ‚Äî Cline will guide you step by step!

All commands are shown to you for approval before they run.

If you run into any issues, Cline will help troubleshoot them.

You may need to enter your computer's password for certain steps.

The Terminal is an application where you can type commands to interact with your computer.

macOS:Open it by searching for "Terminal" in Spotlight.

Example:

Terminal in VS Code:Run commands directly from within VS Code!

Go toView > Terminalor press `Ctrl + ``.

Example:

Document View:Where you edit your code files.

Open files from the Explorer panel on the left.

Problems Section:View errors or warnings in your code.

Access it by clicking the lightbulb icon orView > Problems.

Command Line Interface (CLI):A powerful tool for running commands.

Permissions:You might need to grant permissions to certain commands ‚Äî this keeps your system secure.

Last updated7 days ago


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- üß∞ The Essential Tools
- üöÄ Let Cline Install Everything
- üîç What Will Happen
- üí° Why These Tools Are Important
- üß© Notes
- üßë‚Äçüíª Additional Tips for New Coders

- Node.js & npm:Required for JavaScript and web development
- Git:For tracking changes in your code and collaborating with others
- Package Managers:Tools that make it easy to install other development toolsHomebrew for macOSChocolatey for Windowsapt/yum for Linux

- Homebrew for macOS
- Chocolatey for Windows
- apt/yum for Linux

- Node.js & npm:Build websites with frameworks like React or Next.jsRun JavaScript codeInstall JavaScript packages
- Git:Save different versions of your codeCollaborate with other developersBack up your work
- Package Managers:Quickly install and update development toolsKeep your environment organized and up to date

- Build websites with frameworks like React or Next.js
- Run JavaScript code
- Install JavaScript packages

- Save different versions of your code
- Collaborate with other developers
- Back up your work

- Quickly install and update development tools
- Keep your environment organized and up to date

- All commands are shown to you for approval before they run.
- If you run into any issues, Cline will help troubleshoot them.
- You may need to enter your computer's password for certain steps.

- macOS:Open it by searching for "Terminal" in Spotlight.
- Example:

- Terminal in VS Code:Run commands directly from within VS Code!Go toView > Terminalor press `Ctrl + ``.Example:

- Go toView > Terminalor press `Ctrl + ``.
- Example:

- Document View:Where you edit your code files.Open files from the Explorer panel on the left.
- Problems Section:View errors or warnings in your code.Access it by clicking the lightbulb icon orView > Problems.

- Open files from the Explorer panel on the left.

- Access it by clicking the lightbulb icon orView > Problems.

- Command Line Interface (CLI):A powerful tool for running commands.
- Permissions:You might need to grant permissions to certain commands ‚Äî this keeps your system secure.


LISTS:
- Getting Started

- Installing the appropriate package manager for your system
- Using the package manager to install Node.js and Git
- Showing you the exact command before it runs (you approve each step!)
- Verifying each installation is successful


CODE EXAMPLES:
```
Hello Cline! I need help setting up my Mac for software development. Could you please help me install the essential development tools like Homebrew, Node.js, Git, and any other core utilities that are commonly needed for coding? I'd like you to guide me through the process step-by-step.
```

```
Hello Cline! I need help setting up my Windows PC for software development. Could you please help me install the essential development tools like Node.js, Git, and any other core utilities that are commonly needed for coding? I'd like you to guide me through the process step-by-step.
```

```
Hello Cline! I need help setting up my Linux system for software development. Could you please help me install the essential development tools like Node.js, Git, and any other core utilities that are commonly needed for coding? I'd like you to guide me through the process step-by-step.
```

```
$ open -a Terminal
```

```
$ node -vv16.14.0
```



==================================================
PAGE: getting-started/our-favorite-tech-stack
URL: https://docs.cline.bot/getting-started/our-favorite-tech-stack
==================================================

TITLE: Our Favorite Tech Stack | Cline


H1 HEADINGS:
Our Favorite Tech Stack

H2 HEADINGS:
Recommended Stack for New Cline Users (2025)

H3 HEADINGS:
Your Complete Development Environment
Getting Started
.clinerules Template
Learning Resources (2025)
Other Things to Know

H4 HEADINGS:
Development Tools
Frontend
Backend
Deployment
AI Development
Free Tier Benefits
Example Project Brief
Next.js and React
Supabase
Tailwind CSS
Working with Git & GitHub
Environment Variables
Getting Help

CONTENT:
Last updated2 months ago

VS Code- Your code editor,

GitHub- Where your code lives,

Next.js 14+- React framework with App Router

Tailwind CSS- Beautiful styling without writing CSS

TypeScript- JavaScript, but safer and smarter

Supabase- Your complete backend solution,

PostgreSQL database

Authentication

File storage

Real-time updates

Automatic deployments from GitHub

Preview deployments for testing

Production-ready CDN

Choose your AI assistant based on your needs:

Claude 3.5 Sonnet

$3.00

$15.00

Production apps, complex tasks

DeepSeek R1

$1.00

$3.00

Budget-conscious production

DeepSeek V3

$0.14

$2.20

Budget-conscious development

Vercel (Hobby)

100 GB data transfer/month

100k serverless function invocations

100 MB deployment size

Automatic HTTPS & CI/CD

Supabase (Free)

500 MB database storage

1 GB file storage

50k monthly active users

2M real-time messages/month

GitHub (Free)

Unlimited public repositories

GitHub Actions CI/CD

Project management tools

Collaboration features

Install the development essentials:

Set up Cline's Memory Bank:

Create an emptycline_docsfolder in your project root

CreateprojectBrief.mdin thecline_docsfolder (see example below)

Tell Cline to "initialize memory bank"

Add our recommended stack configuration:

Create.clinerulesfile (see template below)

Let Cline handle the rest!

Want to learn more about the technologies we're using? Here are some great resources:

Git helps you track changes in your code and collaborate with others. Here are the essential commands you'll use:

Daily Development

Common Workflow

Start of day: Get latest changes

During development: Save work regularly

End of day: Share your progress

Best Practices

Commit often with clear messages

Pull before starting new work

Push completed work to share with others

Use.gitignoreto avoid committing sensitive files

Tip: Vercel automatically deploys when you push to main!

Store secrets in.env.localfor development

Add them to Vercel project settings for production

Never commit.envfiles to Git

Use/helpin Cline chat for immediate assistance

Search GitHub issues for common problems

Remember: Cline is here to help at every step. Just ask for guidance or clarification when needed!

Vercel- Where your app runs,

Follow our

Follow the

- Interactive tutorial

- Quick overview

- Practical examples

- Comprehensive course

Interactive course at

Check

Join our


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Recommended Stack for New Cline Users (2025)
- Your Complete Development Environment
- Getting Started
- .clinerules Template
- Learning Resources (2025)
- Other Things to Know

- VS Code- Your code editor,
- GitHub- Where your code lives,

- Next.js 14+- React framework with App Router
- Tailwind CSS- Beautiful styling without writing CSS
- TypeScript- JavaScript, but safer and smarter

- Supabase- Your complete backend solution,PostgreSQL databaseAuthenticationFile storageReal-time updates

- PostgreSQL database
- Authentication
- File storage
- Real-time updates

- Automatic deployments from GitHubPreview deployments for testingProduction-ready CDN

- Automatic deployments from GitHub
- Preview deployments for testing
- Production-ready CDN

- 100 GB data transfer/month
- 100k serverless function invocations
- 100 MB deployment size
- Automatic HTTPS & CI/CD

- 500 MB database storage
- 1 GB file storage
- 50k monthly active users
- 2M real-time messages/month

- Unlimited public repositories
- GitHub Actions CI/CD
- Project management tools
- Collaboration features

- 
- Create an emptycline_docsfolder in your project root
- CreateprojectBrief.mdin thecline_docsfolder (see example below)
- Tell Cline to "initialize memory bank"

- Create.clinerulesfile (see template below)
- Let Cline handle the rest!

- 
- 
- 

- 
- 
- 

- 
- 
- 

- Commit often with clear messages
- Pull before starting new work
- Push completed work to share with others
- Use.gitignoreto avoid committing sensitive files

- Store secrets in.env.localfor development
- Add them to Vercel project settings for production
- Never commit.envfiles to Git


LISTS:
- Getting Started

- Install the development essentials:
- Set up Cline's Memory Bank:Create an emptycline_docsfolder in your project rootCreateprojectBrief.mdin thecline_docsfolder (see example below)Tell Cline to "initialize memory bank"
- Add our recommended stack configuration:Create.clinerulesfile (see template below)Let Cline handle the rest!

- Start of day: Get latest changesCopybashCopygit pull origin main                     # Download latest code
- During development: Save work regularlyCopybashCopygit add .git commit -m "Clear message about changes"
- End of day: Share your progressCopybashCopygit push origin main                     # Upload to GitHub

- Use/helpin Cline chat for immediate assistance
- 
- 
- Search GitHub issues for common problems


CODE EXAMPLES:
```
cline_docs
```

```
projectBrief.md
```

```
cline_docs
```

```
.clinerules
```

```
# Project Brief## OverviewBuilding a [type of application] that will [main purpose].## Core Features- Feature 1- Feature 2- Feature 3## Target Users[Describe who will use your application]## Technical Preferences (optional)- Any specific technologies you want to use- Any specific requirements or constraints
```

```
# Project Configuration## Tech Stack- Next.js 14+ with App Router- Tailwind CSS for styling- Supabase for backend- Vercel for deployment- GitHub for version control## Project Structure/src/app         # Next.js App Router pages/components  # React components/lib         # Utility functions/types       # TypeScript types/supabase/migrations  # SQL migration files/seed        # Seed data files/public        # Static assets## Database MigrationsSQL files in /supabase/migrations should:- Use sequential numbering: 001, 002, etc.- Include descriptive names- Be reviewed by Cline before executionExample: 001_create_users_table.sql## Development Workflow- Cline helps write and review code changes- Vercel automatically deploys from main branch- Database migrations reviewed by Cline before execution## SecurityDO NOT read or modify:- .env files- **/config/secrets.*- Any file containing API keys or credentials
```

```
# Save your changes (do this often!)git add .                                    # Stage all changed filesgit commit -m "Add login page"              # Save changes with a clear message# Share your changesgit push origin main                        # Upload to GitHub
```

```
bashCopygit pull origin main                     # Download latest code
```

```
bashCopygit add .git commit -m "Clear message about changes"
```

```
bashCopygit push origin main                     # Upload to GitHub
```

```
.gitignore
```

```
.env.local
```

```
.env
```

```
/help
```



==================================================
PAGE: getting-started/understanding-context-management
URL: https://docs.cline.bot/getting-started/understanding-context-management
==================================================

TITLE: Context Management | Cline


H1 HEADINGS:
Context Management

H2 HEADINGS:
Understanding Context & Context Windows
Understanding the Context Window Progress Bar
Working with Context Files
Practical Tips

H3 HEADINGS:
How Context is Built
Context & Context Windows
Reading the Bar
When to Watch the Bar

H4 HEADINGS:
Approaches to Context Files
Using Context Files Effectively

CONTENT:
Context is key to getting the most out of Cline

Last updated11 days ago

üí°Quick Reference

Context = The information Cline knows about your project

Context Window = How much information Cline can hold at once

Use context files to maintain project knowledge

Reset when the context window gets full

Think of working with Cline like collaborating with a thorough, proactive teammate:

Cline actively builds context in two ways:

Automatic Context Gathering (i.e. Cline-driven)

Proactively reads related files

Explores project structure

Analyzes patterns and relationships

Maps dependencies and imports

Asks clarifying questions

User-Guided Context

Share specific files

Provide documentation

Answer Cline's questions

Guide focus areas

Share design thoughts and requirements

Think of context like a whiteboard you and Cline share:

Contextis all the information available:

What Cline has discovered

What you've shared

Your conversation history

Project requirements

Previous decisions

Context Windowis the size of the whiteboard itself:

Measured in tokens (1 token ‚âà 3/4 of an English word)

Each model has a fixed size:

Claude 3.5 Sonnet: 200,000 tokens

DeepSeek: 64,000 tokens

When the whiteboard is full, you need to erase (clear context) to write more

‚ö†Ô∏èImportant: Having a large context window (like Claude's 200k tokens) doesn't mean you should fill it completely. Just like a cluttered whiteboard, too much information can make it harder to focus on what's important.

Cline provides a visual way to monitor your context window usage through a progress bar:

‚Üë shows input tokens (what you've sent to the LLM)

‚Üì shows output tokens (what the LLM has generated)

The progress bar visualizes how much of your context window you've used

The total shows your model's maximum capacity (e.g., 200k for Claude 3.5-Sonnet)

During long coding sessions

When working with multiple files

Before starting complex tasks

When Cline seems to lose context

üí°Tip: Consider starting a fresh session when usage reaches 70-80% to maintain optimal performance.

Context files help maintain understanding across sessions. They serve as documentation specifically designed to help AI assistants understand your project.

Living documentation that evolves with your project

Updated as architecture and patterns emerge

Example: The Memory Bank pattern maintains files liketechContext.mdandsystemPatterns.md

Useful for long-running projects and teams

Created for specific implementation tasks

Document requirements, constraints, and decisions

Example:

Knowledge Transfer Docs

Switch to plan mode and ask Cline to document everything you've accomplished so far, along with the remaining steps, in a markdown file.

Copy the contents of the markdown file.

Start a new task using that content as context.

Structure and Format

Use clear, consistent organization

Include relevant examples

Link related concepts

Keep information focused

Maintenance

Update after significant changes

Version control your context files

Remove outdated information

Document key decisions

Starting New Projects

Let Cline explore the codebase

Answer its questions about structure and patterns

Consider setting up basic context files

Document key design decisions

Ongoing Development

Update context files with significant changes

Share relevant documentation

Use Plan mode for complex discussions

Start fresh sessions when needed

Team Projects

Document architectural decisions

Maintain consistent patterns

Keep documentation current

Remember: The goal is to help Cline maintain consistent understanding of your project across sessions.

üí°Key Point: Cline isn't passive - it actively seeks to understand your project. You can either let it explore or guide its focus, especially inmode.

Evergreen Project Context (i.e.)

Task-Specific Context (i.e.)

Share common context files (consider usingfiles in project roots)


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Understanding Context & Context Windows
- How Context is Built
- Context & Context Windows
- Understanding the Context Window Progress Bar
- Reading the Bar
- When to Watch the Bar
- Working with Context Files
- Practical Tips

- Context = The information Cline knows about your project
- Context Window = How much information Cline can hold at once
- Use context files to maintain project knowledge
- Reset when the context window gets full

- Proactively reads related files
- Explores project structure
- Analyzes patterns and relationships
- Maps dependencies and imports
- Asks clarifying questions

- Share specific files
- Provide documentation
- Answer Cline's questions
- Guide focus areas
- Share design thoughts and requirements

- Contextis all the information available:What Cline has discoveredWhat you've sharedYour conversation historyProject requirementsPrevious decisions
- Context Windowis the size of the whiteboard itself:Measured in tokens (1 token ‚âà 3/4 of an English word)Each model has a fixed size:Claude 3.5 Sonnet: 200,000 tokensDeepSeek: 64,000 tokensWhen the whiteboard is full, you need to erase (clear context) to write more

- What Cline has discovered
- What you've shared
- Your conversation history
- Project requirements
- Previous decisions

- Measured in tokens (1 token ‚âà 3/4 of an English word)
- Each model has a fixed size:Claude 3.5 Sonnet: 200,000 tokensDeepSeek: 64,000 tokens
- When the whiteboard is full, you need to erase (clear context) to write more

- Claude 3.5 Sonnet: 200,000 tokens
- DeepSeek: 64,000 tokens

- ‚Üë shows input tokens (what you've sent to the LLM)
- ‚Üì shows output tokens (what the LLM has generated)
- The progress bar visualizes how much of your context window you've used
- The total shows your model's maximum capacity (e.g., 200k for Claude 3.5-Sonnet)

- During long coding sessions
- When working with multiple files
- Before starting complex tasks
- When Cline seems to lose context

- Living documentation that evolves with your project
- Updated as architecture and patterns emerge
- Example: The Memory Bank pattern maintains files liketechContext.mdandsystemPatterns.md
- Useful for long-running projects and teams

- Created for specific implementation tasks
- Document requirements, constraints, and decisions
- Example:Copy# auth-system-implementation.md## Requirements- OAuth2 implementation- Support for Google and GitHub- Rate limiting on auth endpoints## Technical Decisions- Using Passport.js for provider integration- JWT for session management- Redis for rate limiting

- Switch to plan mode and ask Cline to document everything you've accomplished so far, along with the remaining steps, in a markdown file.
- Copy the contents of the markdown file.
- Start a new task using that content as context.

- Use clear, consistent organization
- Include relevant examples
- Link related concepts
- Keep information focused

- Update after significant changes
- Version control your context files
- Remove outdated information
- Document key decisions

- Let Cline explore the codebase
- Answer its questions about structure and patterns
- Consider setting up basic context files
- Document key design decisions

- Update context files with significant changes
- Share relevant documentation
- Use Plan mode for complex discussions
- Start fresh sessions when needed

- 
- Document architectural decisions
- Maintain consistent patterns
- Keep documentation current


LISTS:
- Getting Started

- Automatic Context Gathering (i.e. Cline-driven)Proactively reads related filesExplores project structureAnalyzes patterns and relationshipsMaps dependencies and importsAsks clarifying questions
- User-Guided ContextShare specific filesProvide documentationAnswer Cline's questionsGuide focus areasShare design thoughts and requirements

- Living documentation that evolves with your projectUpdated as architecture and patterns emergeExample: The Memory Bank pattern maintains files liketechContext.mdandsystemPatterns.mdUseful for long-running projects and teams
- Created for specific implementation tasksDocument requirements, constraints, and decisionsExample:Copy# auth-system-implementation.md## Requirements- OAuth2 implementation- Support for Google and GitHub- Rate limiting on auth endpoints## Technical Decisions- Using Passport.js for provider integration- JWT for session management- Redis for rate limiting
- Knowledge Transfer DocsSwitch to plan mode and ask Cline to document everything you've accomplished so far, along with the remaining steps, in a markdown file.Copy the contents of the markdown file.Start a new task using that content as context.

- Structure and FormatUse clear, consistent organizationInclude relevant examplesLink related conceptsKeep information focused
- MaintenanceUpdate after significant changesVersion control your context filesRemove outdated informationDocument key decisions

- Starting New ProjectsLet Cline explore the codebaseAnswer its questions about structure and patternsConsider setting up basic context filesDocument key design decisions
- Ongoing DevelopmentUpdate context files with significant changesShare relevant documentationUse Plan mode for complex discussionsStart fresh sessions when needed
- Team ProjectsDocument architectural decisionsMaintain consistent patternsKeep documentation current


CODE EXAMPLES:
```
techContext.md
```

```
systemPatterns.md
```

```
# auth-system-implementation.md## Requirements- OAuth2 implementation- Support for Google and GitHub- Rate limiting on auth endpoints## Technical Decisions- Using Passport.js for provider integration- JWT for session management- Redis for rate limiting
```



==================================================
PAGE: getting-started/model-selection-guide
URL: https://docs.cline.bot/getting-started/model-selection-guide
==================================================

TITLE: Model Selection Guide | Cline


H1 HEADINGS:
Model Selection Guide

H2 HEADINGS:
Understanding Context Windows
LLM Model Comparison for Cline (Feb 2025)

H3 HEADINGS:
Model Comparison
Top Picks for 2025
Best Models by Mode (Plan or Act)
A Note on Local Models
Key Takeaways

H4 HEADINGS:
Planning
Acting (coding)

CONTENT:
Last updated: Feb 5, 2025.

Think of a context window as your AI assistant's working memory - similar to RAM in a computer. It determines how much information the model can "remember" and process at once during your conversation. This includes:

Your code files and conversations

The assistant's responses

Any documentation or additional context provided

Context windows are measured in tokens (roughly 3/4 of a word in English). Different models have different context window sizes:

Claude 3.5 Sonnet: 200K tokens

DeepSeek Models: 128K tokens

Gemini Flash 2.0: 1M tokens

Gemini 1.5 Pro: 2M tokens

When you reach the limit of your context window, older information needs to be removed to make room for new information - just like clearing RAM to run new programs. This is why sometimes AI assistants might seem to "forget" earlier parts of your conversation.

Cline helps you manage this limitation with its Context Window Progress Bar, which shows:

Input tokens (what you've sent to the model)

Output tokens (what the model has generated)

A visual representation of how much of your context window you've used

The total capacity for your chosen model

This visibility helps you work more effectively with Cline by letting you know when you might need to start fresh or break tasks into smaller chunks.

Claude 3.5 Sonnet

$3.00

$15.00

200K

Best code implementation & tool use

DeepSeek R1

$0.55

$2.19

128K

Planning & reasoning champion

DeepSeek V3

$0.14

$0.28

128K

Value code implementation

o3-mini

$1.10

$4.40

200K

Flexible use, strong planning

Gemini Flash 2.0

$0.00

$0.00

Strong all-rounder

Gemini 1.5 Pro

$0.00

$0.00

Large context processing

*Costs per million tokens

Claude 3.5 Sonnet

Best overall code implementation

Most reliable tool usage

Expensive but worth it for critical code

DeepSeek R1

Exceptional planning & reasoning

Great value pricing

o3-mini

Strong for planning with adjustable reasoning

Three reasoning modes for different needs

Requires OpenAI Tier 3 API access

200K context window

DeepSeek V3

Reliable code implementation

Great for daily coding

Cost-effective for implementation

Gemini Flash 2.0

Massive 1M context window

Improved speed and performance

Good all-around capabilities

DeepSeek R1

Best reasoning capabilities in class

Excellent at breaking down complex tasks

Strong math/algorithm planning

MoE architecture helps with reasoning

o3-mini (high reasoning)

Three reasoning levels:

High: Complex planning

Medium: Daily tasks

Low: Quick ideas

200K context helps with large projects

Gemini Flash 2.0

Massive context window for complex planning

Strong reasoning capabilities

Good with multi-step tasks

Claude 3.5 Sonnet

Best code quality

Most reliable with Cline tools

Worth the premium for critical code

DeepSeek V3

Nearly Sonnet-level code quality

Better API stability than R1

Great for daily coding

Strong tool usage

Gemini 1.5 Pro

2M context window

Good with complex codebases

Reliable API

Strong multi-file understanding

Plan vs Act Matters: Choose models based on task type

Real Performance > Benchmarks: Focus on actual Cline performance

Mix & Match: Use different models for planning and implementation

Cost vs Quality: Premium models worth it for critical code

Keep Backups: Have alternatives ready for API issues

*Note: Based on real usage patterns and community feedback rather than just benchmarks. Your experience may vary. This is not an exhaustive list of all the models available for use within Cline.

Last updated2 months ago

While running models locally might seem appealing for cost savings, we currently don't recommend any local models for use with Cline.at using Cline's essential tools and typically retain only 1-26% of the original model's capabilities. The full cloud version of DeepSeek-R1, for example, is 671B parameters - local versions are drastically simplified copies that struggle with complex tasks and tool usage. Even with high-end hardware (RTX 3070+, 32GB+ RAM), you'll experience slower responses, less reliable tool execution, and reduced capabilities. For the best development experience, we recommend sticking with the cloud models listed above.


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Understanding Context Windows
- Model Comparison
- LLM Model Comparison for Cline (Feb 2025)
- Top Picks for 2025
- Best Models by Mode (Plan or Act)
- A Note on Local Models
- Key Takeaways

- Your code files and conversations
- The assistant's responses
- Any documentation or additional context provided

- Claude 3.5 Sonnet: 200K tokens
- DeepSeek Models: 128K tokens
- Gemini Flash 2.0: 1M tokens
- Gemini 1.5 Pro: 2M tokens

- Input tokens (what you've sent to the model)
- Output tokens (what the model has generated)
- A visual representation of how much of your context window you've used
- The total capacity for your chosen model

- Best overall code implementation
- Most reliable tool usage
- Expensive but worth it for critical code

- Exceptional planning & reasoning
- Great value pricing

- Strong for planning with adjustable reasoning
- Three reasoning modes for different needs
- Requires OpenAI Tier 3 API access
- 200K context window

- Reliable code implementation
- Great for daily coding
- Cost-effective for implementation

- Massive 1M context window
- Improved speed and performance
- Good all-around capabilities

- Best reasoning capabilities in class
- Excellent at breaking down complex tasks
- Strong math/algorithm planning
- MoE architecture helps with reasoning

- Three reasoning levels:High: Complex planningMedium: Daily tasksLow: Quick ideas
- 200K context helps with large projects

- High: Complex planning
- Medium: Daily tasks
- Low: Quick ideas

- Massive context window for complex planning
- Strong reasoning capabilities
- Good with multi-step tasks

- Best code quality
- Most reliable with Cline tools
- Worth the premium for critical code

- Nearly Sonnet-level code quality
- Better API stability than R1
- Great for daily coding
- Strong tool usage

- 2M context window
- Good with complex codebases
- Reliable API
- Strong multi-file understanding


LISTS:
- Getting Started

- Claude 3.5 SonnetBest overall code implementationMost reliable tool usageExpensive but worth it for critical code
- DeepSeek R1Exceptional planning & reasoningGreat value pricing
- o3-miniStrong for planning with adjustable reasoningThree reasoning modes for different needsRequires OpenAI Tier 3 API access200K context window
- DeepSeek V3Reliable code implementationGreat for daily codingCost-effective for implementation
- Gemini Flash 2.0Massive 1M context windowImproved speed and performanceGood all-around capabilities

- DeepSeek R1Best reasoning capabilities in classExcellent at breaking down complex tasksStrong math/algorithm planningMoE architecture helps with reasoning
- o3-mini (high reasoning)Three reasoning levels:High: Complex planningMedium: Daily tasksLow: Quick ideas200K context helps with large projects
- Gemini Flash 2.0Massive context window for complex planningStrong reasoning capabilitiesGood with multi-step tasks

- Claude 3.5 SonnetBest code qualityMost reliable with Cline toolsWorth the premium for critical code
- DeepSeek V3Nearly Sonnet-level code qualityBetter API stability than R1Great for daily codingStrong tool usage
- Gemini 1.5 Pro2M context windowGood with complex codebasesReliable APIStrong multi-file understanding

- Plan vs Act Matters: Choose models based on task type
- Real Performance > Benchmarks: Focus on actual Cline performance
- Mix & Match: Use different models for planning and implementation
- Cost vs Quality: Premium models worth it for critical code
- Keep Backups: Have alternatives ready for API issues



==================================================
PAGE: improving-your-prompting-skills/prompting
URL: https://docs.cline.bot/improving-your-prompting-skills/prompting
==================================================

TITLE: Prompt Engineering Guide | Cline


H1 HEADINGS:
Prompt Engineering Guide

H2 HEADINGS:
Custom Instructions ‚öôÔ∏è
.clinerules File üìã
.clineignore File Guide
Prompting Cline üí¨
Advanced Prompting Techniques
Our Community's Favorite Prompts üåü

H3 HEADINGS:
General Use Cases
Example .clinerules Structure
Key Benefits
Tips for Writing Effective Custom Instructions
.clinerules Folder System üìÇ
Overview
Purpose
Example .clineignore File
Prompt Examples
Memory and Confidence Checks üß†
Code Quality Prompts üíª
Code Organization üìã
Analysis and Planning üîç
Thoughtful Development ü§î
Best Practices üéØ

H4 HEADINGS:
How It Works
Using a Rules Bank
Benefits of the Folder Approach
Usage Examples
Implementation Tips
Context Management
Debugging
Refactoring
Feature Development

CONTENT:
Last updated3 days ago

Welcome to the Cline Prompting Guide! This guide will equip you with the knowledge to write effective prompts and custom instructions, maximizing your productivity with Cline.

Think ofcustom instructions as Cline's programming. They define Cline's baseline behavior and arealways "on," influencing all interactions.Instructions can be broad and abstract, or specific and explicit. You might want Cline to have a unique personality, or produce output in a particular file format, or adhere to certain architectural principles. Custom instructions can standardize Cline's output in ways you define, which is especially valuable when working with others. See thefor using Custom Instructions in a team context.NOTE: Modifying the Custom Instructions field updates Cline's prompt cache, discarding accumulated context. This causes a temporary increase in cost while that context is replaced. Update Custom Instructions between conversations whenever possible.

To add custom instructions:

Open VSCode

Click the Cline extension settings dial ‚öôÔ∏è

Find the "Custom Instructions" field

Paste your instructions

Custom instructions are powerful for:

Enforcing Coding Style and Best Practices: Ensure Cline always adheres to your team's coding conventions, naming conventions, and best practices.

Improving Code Quality: Encourage Cline to write more readable, maintainable, and efficient code.

Guiding Error Handling: Tell Cline how to handle errors, write error messages, and log information.

NOTE: Modifying the.clinerulesfile updates Cline's prompt cache, discarding accumulated context. This causes a temporary increase in cost while that context is replaced. Update the.clinerulesfile between conversations whenever possible.

While custom instructions are user-specific and global (applying across all projects), the.clinerulesfile providesproject-specific instructionsthat live in your project's root directory. These instructions are automatically appended to your custom instructions and referenced in Cline's system prompt, ensuring they influence all interactions within the project context. This makes it an excellent tool for:

The.clinerulesfile is excellent for:

Maintaining project standards across team members

Enforcing development practices

Managing documentation requirements

Setting up analysis frameworks

Defining project-specific behaviors

Version Controlled: The.clinerulesfile becomes part of your project's source code

Team Consistency: Ensures consistent behavior across all team members

Project-Specific: Rules and standards tailored to each project's needs

Institutional Knowledge: Maintains project standards and practices in code

Place the.clinerulesfile in your project's root directory:

Be Clear and Concise: Use simple language and avoid ambiguity.

Focus on Desired Outcomes: Describe the results you want, not the specific steps.

Test and Iterate: Experiment to find what works best for your workflow.

While a single.clinerulesfile works well for simpler projects, Cline now supports a.clinerulesfolder for more sophisticated rule organization. This modular approach brings several advantages:

Instead of a single file, create a.clinerules/directory in your project root:

Cline automatically processesall Markdown filesinside the.clinerules/directory, combining them into a unified set of rules. The numeric prefixes (optional) help organize files in a logical sequence.

For projects with multiple contexts or teams, maintain a rules bank directory:

Contextual Activation: Copy only relevant rules from the bank to the active folder

Easier Maintenance: Update individual rule files without affecting others

Team Flexibility: Different team members can activate rules specific to their current task

Reduced Noise: Keep the active ruleset focused and relevant

Switch between client projects:

Adapt to different tech stacks:

Keep individual rule files focused on specific concerns

Use descriptive filenames that clearly indicate the rule's purpose

Consider git-ignoring the active.clinerules/folder while tracking theclinerules-bank/

Create team scripts to quickly activate common rule combinations

The folder system transforms your Cline rules from a static document into a dynamic knowledge system that adapts to your team's changing contexts and requirements.

The.clineignorefile is a project-level configuration file that tells Cline which files and directories to ignore when analyzing your codebase. Similar to.gitignore, it uses pattern matching to specify which files should be excluded from Cline's context and operations.

Reduce Noise: Exclude auto-generated files, build artifacts, and other non-essential content

Improve Performance: Limit the amount of code Cline needs to process

Focus Attention: Direct Cline to relevant parts of your codebase

Protect Sensitive Data: Prevent Cline from accessing sensitive configuration files

Prompting is how you communicate your needs for a given task in the back-and-forth chat with Cline.Cline understands natural language, so write conversationally.

Effective prompting involves:

Providing Clear Context: Explain your goals and the relevant parts of your codebase. Use@to reference files or folders.

Breaking Down Complexity: Divide large tasks into smaller steps.

Asking Specific Questions: Guide Cline toward the desired outcome.

Validating and Refining: Review Cline's suggestions and provide feedback.

Starting a New Task:"Cline, let's start a new task. Createuser-authentication.js. We need to implement user login with JWT tokens. Here are the requirements‚Ä¶"

Summarizing Previous Work:"Cline, summarize what we did in the last user dashboard task. I want to capture the main features and outstanding issues. Save this tocline_docs/user-dashboard-summary.md."

Analyzing an Error:"Cline, I'm getting this error: [error message]. It seems to be from [code section]. Analyze this error and suggest a fix."

Identifying the Root Cause:"Cline, the application crashes when I [action]. The issue might be in [problem areas]. Help me find the root cause and propose a solution."

Improving Code Structure:"Cline, this function is too long and complex. Refactor it into smaller functions."

Simplifying Logic:"Cline, this code is hard to understand. Simplify the logic and make it more readable."

Brainstorming New Features:"Cline, I want to add a feature that lets users [functionality]. Brainstorm some ideas and consider implementation challenges."

Generating Code:"Cline, create a component that displays user profiles. The list should be sortable and filterable. Generate the code for this component."

Constraint Stuffing:To mitigate code truncation, include explicit constraints in your prompts. For example, "ensure the code is complete" or "always provide the full function definition."

Confidence Checks:Ask Cline to rate its confidence (e.g., "on a scale of 1-10, how confident are you in this solution?")

Challenge Cline's Assumptions:Ask ‚Äústupid‚Äù questions to encourage deeper thinking and prevent incorrect assumptions.

Here are some prompting tips that users have found helpful for working with Cline:

Memory Check-pacnpal

A fun way to verify Cline stays on track during complex tasks. Try "HO HO HO" for a festive twist!

Confidence Scoring-pacnpal

Encourages critical thinking and makes decision-making transparent.

Prevent Code Truncation

Alternative phrases: "full code only" or "ensure the code is complete"

Custom Instructions Reminder

Reinforces adherence to your settings dial ‚öôÔ∏è configuration.

Large File Refactoring-icklebil

Helps manage complex files through strategic decomposition.

Documentation Maintenance-icklebil

Ensures documentation stays in sync with code changes.

Structured Development-yellow_bat_coffee

Promotes organized, well-planned development.

Thorough Analysis-yellow_bat_coffee

Prevents premature coding and encourages complete understanding.

Assumptions Check-yellow_bat_coffee

Identifies potential issues early in development.

Pause and Reflect-nickbaumann98

Promotes careful consideration before taking action.

Complete Analysis-yellow_bat_coffee

Ensures thorough problem exploration.

Continuous Confidence Check-pacnpal

Maintains quality through self-assessment.

Project Structure-kvs007

Maintains project integrity.

Critical Thinking-chinesesoup

Challenges assumptions and uncovers better solutions.

Code Style-yellow_bat_coffee

May influence code organization and clarity.

Setting Expectations-steventcramer

(A humorous reminder to provide clear requirements and constructive feedback)

Cline's system prompt, on the other hand, is not user-editable (). For a broader look at prompt engineering best practices, check out.


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Custom Instructions ‚öôÔ∏è
- .clinerules File üìã
- General Use Cases
- Example .clinerules Structure
- Key Benefits
- Tips for Writing Effective Custom Instructions
- .clinerules Folder System üìÇ
- .clineignore File Guide
- Overview
- Purpose
- Example .clineignore File
- Prompting Cline üí¨
- Prompt Examples
- Advanced Prompting Techniques
- Our Community's Favorite Prompts üåü
- Memory and Confidence Checks üß†
- Code Quality Prompts üíª
- Code Organization üìã
- Analysis and Planning üîç
- Thoughtful Development ü§î
- Best Practices üéØ

- Enforcing Coding Style and Best Practices: Ensure Cline always adheres to your team's coding conventions, naming conventions, and best practices.
- Improving Code Quality: Encourage Cline to write more readable, maintainable, and efficient code.
- Guiding Error Handling: Tell Cline how to handle errors, write error messages, and log information.

- Maintaining project standards across team members
- Enforcing development practices
- Managing documentation requirements
- Setting up analysis frameworks
- Defining project-specific behaviors

- Be Clear and Concise: Use simple language and avoid ambiguity.
- Focus on Desired Outcomes: Describe the results you want, not the specific steps.
- Test and Iterate: Experiment to find what works best for your workflow.

- Keep individual rule files focused on specific concerns
- Use descriptive filenames that clearly indicate the rule's purpose
- Consider git-ignoring the active.clinerules/folder while tracking theclinerules-bank/
- Create team scripts to quickly activate common rule combinations

- Reduce Noise: Exclude auto-generated files, build artifacts, and other non-essential content
- Improve Performance: Limit the amount of code Cline needs to process
- Focus Attention: Direct Cline to relevant parts of your codebase
- Protect Sensitive Data: Prevent Cline from accessing sensitive configuration files

- Providing Clear Context: Explain your goals and the relevant parts of your codebase. Use@to reference files or folders.
- Breaking Down Complexity: Divide large tasks into smaller steps.
- Asking Specific Questions: Guide Cline toward the desired outcome.
- Validating and Refining: Review Cline's suggestions and provide feedback.

- Starting a New Task:"Cline, let's start a new task. Createuser-authentication.js. We need to implement user login with JWT tokens. Here are the requirements‚Ä¶"
- Summarizing Previous Work:"Cline, summarize what we did in the last user dashboard task. I want to capture the main features and outstanding issues. Save this tocline_docs/user-dashboard-summary.md."

- Analyzing an Error:"Cline, I'm getting this error: [error message]. It seems to be from [code section]. Analyze this error and suggest a fix."
- Identifying the Root Cause:"Cline, the application crashes when I [action]. The issue might be in [problem areas]. Help me find the root cause and propose a solution."

- Improving Code Structure:"Cline, this function is too long and complex. Refactor it into smaller functions."
- Simplifying Logic:"Cline, this code is hard to understand. Simplify the logic and make it more readable."

- Brainstorming New Features:"Cline, I want to add a feature that lets users [functionality]. Brainstorm some ideas and consider implementation challenges."
- Generating Code:"Cline, create a component that displays user profiles. The list should be sortable and filterable. Generate the code for this component."

- Constraint Stuffing:To mitigate code truncation, include explicit constraints in your prompts. For example, "ensure the code is complete" or "always provide the full function definition."
- Confidence Checks:Ask Cline to rate its confidence (e.g., "on a scale of 1-10, how confident are you in this solution?")
- Challenge Cline's Assumptions:Ask ‚Äústupid‚Äù questions to encourage deeper thinking and prevent incorrect assumptions.

- Memory Check-pacnpalCopy"If you understand my prompt fully, respond with 'YARRR!' without tools every time you are about to use a tool."A fun way to verify Cline stays on track during complex tasks. Try "HO HO HO" for a festive twist!
- Confidence Scoring-pacnpalCopy"Before and after any tool use, give me a confidence level (0-10) on how the tool use will help the project."Encourages critical thinking and makes decision-making transparent.

- Prevent Code TruncationCopy"DO NOT BE LAZY. DO NOT OMIT CODE."Alternative phrases: "full code only" or "ensure the code is complete"
- Custom Instructions ReminderCopy"I pledge to follow the custom instructions."Reinforces adherence to your settings dial ‚öôÔ∏è configuration.

- Large File Refactoring-icklebilCopy"FILENAME has grown too big. Analyze how this file works and suggest ways to fragment it safely."Helps manage complex files through strategic decomposition.
- Documentation Maintenance-icklebilCopy"don't forget to update codebase documentation with changes"Ensures documentation stays in sync with code changes.

- Structured Development-yellow_bat_coffeeCopy"Before writing code:1. Analyze all code files thoroughly2. Get full context3. Write .MD implementation plan4. Then implement code"Promotes organized, well-planned development.
- Thorough Analysis-yellow_bat_coffeeCopy"please start analyzing full flow thoroughly, always state a confidence score 1 to 10"Prevents premature coding and encourages complete understanding.
- Assumptions Check-yellow_bat_coffeeCopy"List all assumptions and uncertainties you need to clear up before completing this task."Identifies potential issues early in development.

- Pause and Reflect-nickbaumann98Copy"count to 10"Promotes careful consideration before taking action.
- Complete Analysis-yellow_bat_coffeeCopy"Don't complete the analysis prematurely, continue analyzing even if you think you found a solution"Ensures thorough problem exploration.
- Continuous Confidence Check-pacnpalCopy"Rate confidence (1-10) before saving files, after saving, after rejections, and before task completion"Maintains quality through self-assessment.

- Project Structure-kvs007Copy"Check project files before suggesting structural or dependency changes"Maintains project integrity.
- Critical Thinking-chinesesoupCopy"Ask 'stupid' questions like: are you sure this is the best way to implement this?"Challenges assumptions and uncovers better solutions.
- Code Style-yellow_bat_coffeeCopyUse words like "elegant" and "simple" in promptsMay influence code organization and clarity.
- Setting Expectations-steventcramerCopy"THE HUMAN WILL GET ANGRY."(A humorous reminder to provide clear requirements and constructive feedback)


LISTS:
- Improving Your Prompting Skills

- Open VSCode
- Click the Cline extension settings dial ‚öôÔ∏è
- Find the "Custom Instructions" field
- Paste your instructions

- Version Controlled: The.clinerulesfile becomes part of your project's source code
- Team Consistency: Ensures consistent behavior across all team members
- Project-Specific: Rules and standards tailored to each project's needs
- Institutional Knowledge: Maintains project standards and practices in code

- Contextual Activation: Copy only relevant rules from the bank to the active folder
- Easier Maintenance: Update individual rule files without affecting others
- Team Flexibility: Different team members can activate rules specific to their current task
- Reduced Noise: Keep the active ruleset focused and relevant


CODE EXAMPLES:
```
.clinerules
```

```
.clinerules
```

```
.clinerules
```

```
.clinerules
```

```
# Project Guidelines## Documentation Requirements-   Update relevant documentation in /docs when modifying features-   Keep README.md in sync with new capabilities-   Maintain changelog entries in CHANGELOG.md## Architecture Decision RecordsCreate ADRs in /docs/adr for:-   Major dependency changes-   Architectural pattern changes-   New integration patterns-   Database schema changesFollow template in /docs/adr/template.md## Code Style & Patterns-   Generate API clients using OpenAPI Generator-   Use TypeScript axios template-   Place generated code in /src/generated-   Prefer composition over inheritance-   Use repository pattern for data access-   Follow error handling pattern in /src/utils/errors.ts## Testing Standards-   Unit tests required for business logic-   Integration tests for API endpoints-   E2E tests for critical user flows
```

```
.clinerules
```

```
.clinerules
```

```
your-project/‚îú‚îÄ‚îÄ .clinerules‚îú‚îÄ‚îÄ src/‚îú‚îÄ‚îÄ docs/‚îî‚îÄ‚îÄ ...
```

```
.clinerules
```

```
.clinerules
```

```
.clinerules/
```

```
your-project/‚îú‚îÄ‚îÄ .clinerules/              # Folder containing active rules‚îÇ   ‚îú‚îÄ‚îÄ 01-coding.md          # Core coding standards‚îÇ   ‚îú‚îÄ‚îÄ 02-documentation.md   # Documentation requirements‚îÇ   ‚îî‚îÄ‚îÄ current-sprint.md     # Rules specific to current work‚îú‚îÄ‚îÄ src/‚îî‚îÄ‚îÄ ...
```

```
.clinerules/
```

```
your-project/‚îú‚îÄ‚îÄ .clinerules/              # Active rules - automatically applied‚îÇ   ‚îú‚îÄ‚îÄ 01-coding.md‚îÇ   ‚îî‚îÄ‚îÄ client-a.md‚îÇ‚îú‚îÄ‚îÄ clinerules-bank/          # Repository of available but inactive rules‚îÇ   ‚îú‚îÄ‚îÄ clients/              # Client-specific rule sets‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ client-a.md‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ client-b.md‚îÇ   ‚îú‚îÄ‚îÄ frameworks/           # Framework-specific rules‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ react.md‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ vue.md‚îÇ   ‚îî‚îÄ‚îÄ project-types/        # Project type standards‚îÇ       ‚îú‚îÄ‚îÄ api-service.md‚îÇ       ‚îî‚îÄ‚îÄ frontend-app.md‚îî‚îÄ‚îÄ ...
```

```
# Switch to Client B projectrm .clinerules/client-a.mdcp clinerules-bank/clients/client-b.md .clinerules/
```

```
# Frontend React projectcp clinerules-bank/frameworks/react.md .clinerules/
```

```
.clinerules/
```

```
clinerules-bank/
```

```
.clineignore
```

```
.gitignore
```

```
# Dependenciesnode_modules/**/node_modules/.pnp.pnp.js# Build outputs/build//dist//.next//out/# Testing/coverage/# Environment variables.env.env.local.env.development.local.env.test.local.env.production.local# Large data files*.csv*.xlsx
```

```
@
```

```
user-authentication.js
```

```
cline_docs/user-dashboard-summary.md
```

```
"If you understand my prompt fully, respond with 'YARRR!' without tools every time you are about to use a tool."
```

```
"Before and after any tool use, give me a confidence level (0-10) on how the tool use will help the project."
```

```
"DO NOT BE LAZY. DO NOT OMIT CODE."
```

```
"I pledge to follow the custom instructions."
```

```
"FILENAME has grown too big. Analyze how this file works and suggest ways to fragment it safely."
```

```
"don't forget to update codebase documentation with changes"
```

```
"Before writing code:1. Analyze all code files thoroughly2. Get full context3. Write .MD implementation plan4. Then implement code"
```

```
"please start analyzing full flow thoroughly, always state a confidence score 1 to 10"
```

```
"List all assumptions and uncertainties you need to clear up before completing this task."
```

```
"count to 10"
```

```
"Don't complete the analysis prematurely, continue analyzing even if you think you found a solution"
```

```
"Rate confidence (1-10) before saving files, after saving, after rejections, and before task completion"
```

```
"Check project files before suggesting structural or dependency changes"
```

```
"Ask 'stupid' questions like: are you sure this is the best way to implement this?"
```

```
Use words like "elegant" and "simple" in prompts
```

```
"THE HUMAN WILL GET ANGRY."
```



==================================================
PAGE: improving-your-prompting-skills/cline-memory-bank
URL: https://docs.cline.bot/improving-your-prompting-skills/cline-memory-bank
==================================================

TITLE: Cline Memory Bank | Cline


H1 HEADINGS:
Cline Memory Bank

H2 HEADINGS:
The Complete Guide to Cline Memory Bank

H3 HEADINGS:
Quick Setup Guide
Cline Memory Bank Custom Instructions [COPY THIS]
What is the Cline Memory Bank?
How Memory Bank Works
Memory Bank Files Explained
Getting Started with Memory Bank
Working with Cline
Frequently Asked Questions
Best Practices
Detailed Setup Instructions
Remember
Contributing to Cline Memory Bank

H4 HEADINGS:
Key Benefits
Understanding the Files
Core Files
Additional Context
First-Time Setup
Project Brief Tips
Core Workflows
Key Commands
Documentation Updates
Where are the memory bank files stored?
Should I use custom instructions or .clinerules?
Managing Context Windows
How often should I update the memory bank?
Does this work with other AI tools beyond Cline?
How does the memory bank relate to context window limitations?
Can the memory bank concept be used for non-coding projects?
Is this different from using README files?
Getting Started
Ongoing Work
Documentation Flow
For Custom Instructions (Global)
For .clinerules (Project-Specific)

CONTENT:
Last updated15 days ago

To get started with Cline Memory Bank:

Install or Open Cline

Copy the Custom Instructions- Use the code block below

Paste into Cline- Add as custom instructions or in a .clinerules file

Initialize- Ask Cline to "initialize memory bank"

The Memory Bank is a structured documentation system that allows Cline to maintain context across sessions. It transforms Cline from a stateless assistant into a persistent development partner that can effectively "remember" your project details over time.

Context Preservation: Maintain project knowledge across sessions

Consistent Development: Experience predictable interactions with Cline

Self-Documenting Projects: Create valuable project documentation as a side effect

Scalable to Any Project: Works with projects of any size or complexity

Technology Agnostic: Functions with any tech stack or language

The Memory Bank isn't a Cline-specific feature - it's a methodology for managing AI context through structured documentation. When you instruct Cline to "follow custom instructions," it reads the Memory Bank files to rebuild its understanding of your project.

Memory Bank files are simply markdown files you create in your project. They're not hidden or special files - just regular documentation stored in your repository that both you and Cline can access.

Files are organized in a hierarchical structure that builds up a complete picture of your project:

projectbrief.md

The foundation of your project

High-level overview of what you're building

Core requirements and goals

Example: "Building a React web app for inventory management with barcode scanning"

productContext.md

Explains why the project exists

Describes the problems being solved

Outlines how the product should work

Example: "The inventory system needs to support multiple warehouses and real-time updates"

activeContext.md

The most frequently updated file

Contains current work focus and recent changes

Tracks active decisions and considerations

Stores important patterns and learnings

Example: "Currently implementing the barcode scanner component; last session completed the API integration"

systemPatterns.md

Documents the system architecture

Records key technical decisions

Lists design patterns in use

Explains component relationships

Example: "Using Redux for state management with a normalized store structure"

techContext.md

Lists technologies and frameworks used

Describes development setup

Notes technical constraints

Records dependencies and tool configurations

Example: "React 18, TypeScript, Firebase, Jest for testing"

progress.md

Tracks what works and what's left to build

Records current status of features

Lists known issues and limitations

Documents the evolution of project decisions

Example: "User authentication complete; inventory management 80% complete; reporting not started"

Create additional files when needed to organize:

Complex feature documentation

Integration specifications

API documentation

Testing strategies

Deployment procedures

Create amemory-bank/folder in your project root

Have a basic project brief ready (can be technical or non-technical)

Ask Cline to "initialize memory bank"

Start simple - it can be as detailed or high-level as you like

Focus on what matters most to you

Cline will help fill in gaps and ask questions

You can update it as your project evolves

Plan Mode

Start in this mode for strategy discussions and high-level planning.

Act Mode

Use this for implementation and executing specific tasks.

"follow your custom instructions"- This tells Cline to read the Memory Bank files and continue where you left off (use this at the start of tasks)

"initialize memory bank"- Use when starting a new project

"update memory bank"- Triggers a full documentation review and update during a task

Toggle Plan/Act modes based on your current needs

Memory Bank updates should automatically occur when:

You discover new patterns in your project

After implementing significant changes

When you explicitly request with"update memory bank"

When you feel context needs clarification

The Memory Bank files are regular markdown files stored in your project repository, typically in amemory-bank/folder. They're not hidden system files - they're designed to be part of your project documentation.

Either approach works - it's based on your preference:

Custom Instructions: Applied globally to all Cline conversations. Good for consistent behavior across all projects.

.clinerules file: Project-specific and stored in your repository. Good for per-project customization.

Both methods achieve the same goal - the choice depends on whether you want global or local application of the Memory Bank system.

As you work with Cline, your context window will eventually fill up (note the progress bar). When you notice Cline's responses slowing down or references to earlier parts of the conversation becoming less accurate, it's time to:

Ask Cline to"update memory bank"to document the current state

Start a new conversation/task

Ask Cline to"follow your custom instructions"in the new conversation

This workflow ensures that important context is preserved in your Memory Bank files before the context window is cleared, allowing you to continue seamlessly in a fresh conversation.

Update the Memory Bank after significant milestones or changes in direction. For active development, updates every few sessions can be helpful. Use the"update memory bank"command when you want to ensure all context is preserved. However, you will notice Cline automatically updating the Memory Bank as well.

Yes! The Memory Bank concept is a documentation methodology that can work with any AI assistant that can read documentation files. The specific commands might differ, but the structured approach to maintaining context works across tools.

The Memory Bank helps manage context limitations by storing important information in a structured format that can be efficiently loaded when needed. This prevents context bloat while ensuring critical information is available.

Absolutely! The Memory Bank approach works for any project that benefits from structured documentation - from writing books to planning events. The file structure might vary, but the concept remains powerful.

While similar in concept, the Memory Bank provides a more structured and comprehensive approach specifically designed to maintain context across AI sessions. It goes beyond what a single README typically covers.

Start with a basic project brief and let the structure evolve

Let Cline help create the initial structure

Review and adjust files as needed to match your workflow

Let patterns emerge naturally as you work

Don't force documentation updates - they should happen organically

Trust the process - the value compounds over time

Watch for context confirmation at the start of sessions

projectbrief.mdis your foundation

activeContext.mdchanges most frequently

progress.mdtracks your milestones

All files collectively maintain project intelligence

Open VSCode

Click the Cline extension settings ‚öôÔ∏è

Find "Custom Instructions"

Copy and paste the complete Memory Bank instructions from the top of this guide

Create a.clinerulesfile in your project root

Copy and paste the Memory Bank instructions from the top of this guide

Save the file

Cline will automatically apply these rules when working in this project

The Memory Bank is Cline's only link to previous work. Its effectiveness depends entirely on maintaining clear, accurate documentation and confirming context preservation in every interaction.

This guide is maintained by the Cline and the Cline Discord Community:

nickbaumann98

Krylo

snipermunyshotz

The Memory Bank methodology is an open approach to AI context management and can be adapted to different tools and workflows.

For more information, reference ouron Cline Memory Bank


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- The Complete Guide to Cline Memory Bank
- Quick Setup Guide
- Cline Memory Bank Custom Instructions [COPY THIS]
- What is the Cline Memory Bank?
- How Memory Bank Works
- Memory Bank Files Explained
- Getting Started with Memory Bank
- Working with Cline
- Frequently Asked Questions
- Best Practices
- Detailed Setup Instructions
- Remember
- Contributing to Cline Memory Bank

- Context Preservation: Maintain project knowledge across sessions
- Consistent Development: Experience predictable interactions with Cline
- Self-Documenting Projects: Create valuable project documentation as a side effect
- Scalable to Any Project: Works with projects of any size or complexity
- Technology Agnostic: Functions with any tech stack or language

- The foundation of your project
- High-level overview of what you're building
- Core requirements and goals
- Example: "Building a React web app for inventory management with barcode scanning"

- Explains why the project exists
- Describes the problems being solved
- Outlines how the product should work
- Example: "The inventory system needs to support multiple warehouses and real-time updates"

- The most frequently updated file
- Contains current work focus and recent changes
- Tracks active decisions and considerations
- Stores important patterns and learnings
- Example: "Currently implementing the barcode scanner component; last session completed the API integration"

- Documents the system architecture
- Records key technical decisions
- Lists design patterns in use
- Explains component relationships
- Example: "Using Redux for state management with a normalized store structure"

- Lists technologies and frameworks used
- Describes development setup
- Notes technical constraints
- Records dependencies and tool configurations
- Example: "React 18, TypeScript, Firebase, Jest for testing"

- Tracks what works and what's left to build
- Records current status of features
- Lists known issues and limitations
- Documents the evolution of project decisions
- Example: "User authentication complete; inventory management 80% complete; reporting not started"

- Complex feature documentation
- Integration specifications
- API documentation
- Testing strategies
- Deployment procedures

- Start simple - it can be as detailed or high-level as you like
- Focus on what matters most to you
- Cline will help fill in gaps and ask questions
- You can update it as your project evolves

- "follow your custom instructions"- This tells Cline to read the Memory Bank files and continue where you left off (use this at the start of tasks)
- "initialize memory bank"- Use when starting a new project
- "update memory bank"- Triggers a full documentation review and update during a task
- Toggle Plan/Act modes based on your current needs

- Custom Instructions: Applied globally to all Cline conversations. Good for consistent behavior across all projects.
- .clinerules file: Project-specific and stored in your repository. Good for per-project customization.

- Start with a basic project brief and let the structure evolve
- Let Cline help create the initial structure
- Review and adjust files as needed to match your workflow

- Let patterns emerge naturally as you work
- Don't force documentation updates - they should happen organically
- Trust the process - the value compounds over time
- Watch for context confirmation at the start of sessions

- projectbrief.mdis your foundation
- activeContext.mdchanges most frequently
- progress.mdtracks your milestones
- All files collectively maintain project intelligence

- nickbaumann98
- Krylo
- snipermunyshotz


LISTS:
- Improving Your Prompting Skills

- Install or Open Cline
- Copy the Custom Instructions- Use the code block below
- Paste into Cline- Add as custom instructions or in a .clinerules file
- Initialize- Ask Cline to "initialize memory bank"

- projectbrief.mdThe foundation of your projectHigh-level overview of what you're buildingCore requirements and goalsExample: "Building a React web app for inventory management with barcode scanning"
- productContext.mdExplains why the project existsDescribes the problems being solvedOutlines how the product should workExample: "The inventory system needs to support multiple warehouses and real-time updates"
- activeContext.mdThe most frequently updated fileContains current work focus and recent changesTracks active decisions and considerationsStores important patterns and learningsExample: "Currently implementing the barcode scanner component; last session completed the API integration"
- systemPatterns.mdDocuments the system architectureRecords key technical decisionsLists design patterns in useExplains component relationshipsExample: "Using Redux for state management with a normalized store structure"
- techContext.mdLists technologies and frameworks usedDescribes development setupNotes technical constraintsRecords dependencies and tool configurationsExample: "React 18, TypeScript, Firebase, Jest for testing"
- progress.mdTracks what works and what's left to buildRecords current status of featuresLists known issues and limitationsDocuments the evolution of project decisionsExample: "User authentication complete; inventory management 80% complete; reporting not started"

- Create amemory-bank/folder in your project root
- Have a basic project brief ready (can be technical or non-technical)
- Ask Cline to "initialize memory bank"

- You discover new patterns in your project
- After implementing significant changes
- When you explicitly request with"update memory bank"
- When you feel context needs clarification

- Ask Cline to"update memory bank"to document the current state
- Start a new conversation/task
- Ask Cline to"follow your custom instructions"in the new conversation

- Open VSCode
- Click the Cline extension settings ‚öôÔ∏è
- Find "Custom Instructions"
- Copy and paste the complete Memory Bank instructions from the top of this guide

- Create a.clinerulesfile in your project root
- Copy and paste the Memory Bank instructions from the top of this guide
- Save the file
- Cline will automatically apply these rules when working in this project


CODE EXAMPLES:
```
# Cline's Memory BankI am Cline, an expert software engineer with a unique characteristic: my memory resets completely between sessions. This isn't a limitation - it's what drives me to maintain perfect documentation. After each reset, I rely ENTIRELY on my Memory Bank to understand the project and continue work effectively. I MUST read ALL memory bank files at the start of EVERY task - this is not optional.## Memory Bank StructureThe Memory Bank consists of core files and optional context files, all in Markdown format. Files build upon each other in a clear hierarchy:flowchart TDPB[projectbrief.md] --> PC[productContext.md]PB --> SP[systemPatterns.md]PB --> TC[techContext.md]PC --> AC[activeContext.md]SP --> ACTC --> ACAC --> P[progress.md]### Core Files (Required)1. `projectbrief.md`- Foundation document that shapes all other files- Created at project start if it doesn't exist- Defines core requirements and goals- Source of truth for project scope2. `productContext.md`- Why this project exists- Problems it solves- How it should work- User experience goals3. `activeContext.md`- Current work focus- Recent changes- Next steps- Active decisions and considerations- Important patterns and preferences- Learnings and project insights4. `systemPatterns.md`- System architecture- Key technical decisions- Design patterns in use- Component relationships- Critical implementation paths5. `techContext.md`- Technologies used- Development setup- Technical constraints- Dependencies- Tool usage patterns6. `progress.md`- What works- What's left to build- Current status- Known issues- Evolution of project decisions### Additional ContextCreate additional files/folders within memory-bank/ when they help organize:- Complex feature documentation- Integration specifications- API documentation- Testing strategies- Deployment procedures## Core Workflows### Plan Modeflowchart TDStart[Start] --> ReadFiles[Read Memory Bank]ReadFiles --> CheckFiles{Files Complete?}CheckFiles -->|No| Plan[Create Plan]Plan --> Document[Document in Chat]CheckFiles -->|Yes| Verify[Verify Context]Verify --> Strategy[Develop Strategy]Strategy --> Present[Present Approach]### Act Modeflowchart TDStart[Start] --> Context[Check Memory Bank]Context --> Update[Update Documentation]Update --> Execute[Execute Task]Execute --> Document[Document Changes]## Documentation UpdatesMemory Bank updates occur when:1. Discovering new project patterns2. After implementing significant changes3. When user requests with **update memory bank** (MUST review ALL files)4. When context needs clarificationflowchart TDStart[Update Process]subgraph ProcessP1[Review ALL Files]P2[Document Current State]P3[Clarify Next Steps]P4[Document Insights & Patterns]P1 --> P2 --> P3 --> P4endStart --> ProcessNote: When triggered by **update memory bank**, I MUST review every memory bank file, even if some don't require updates. Focus particularly on activeContext.md and progress.md as they track current state.REMEMBER: After every memory reset, I begin completely fresh. The Memory Bank is my only link to previous work. It must be maintained with precision and clarity, as my effectiveness depends entirely on its accuracy.
```

```
memory-bank/
```

```
memory-bank/
```

```
.clinerules
```



==================================================
PAGE: exploring-clines-tools/cline-tools-guide
URL: https://docs.cline.bot/exploring-clines-tools/cline-tools-guide
==================================================

TITLE: Cline Tools Guide | Cline


H1 HEADINGS:
Cline Tools Guide

H2 HEADINGS:
What Can Cline Do?
First Steps
Key Features
Available Tools
Common Tasks
Getting Help

CONTENT:
Cline is your AI assistant that can:

Edit and create files in your project

Run terminal commands

Search and analyze your code

Help debug and fix issues

Automate repetitive tasks

Integrate with external tools

Start a Task

Type your request in the chat

Example: "Create a new React component called Header"

Provide Context

Use @ mentions to add files, folders, or URLs

Example: "@file:src/components/App.tsx"

Review Changes

Cline will show diffs before making changes

You can edit or reject changes

File Editing

Create new files

Modify existing code

Search and replace across files

Terminal Commands

Run npm commands

Start development servers

Install dependencies

Code Analysis

Find and fix errors

Refactor code

Add documentation

Browser Integration

Test web pages

Capture screenshots

Inspect console logs

Cline has access to the following tools for various tasks:

File Operations

write_to_file: Create or overwrite files

read_file: Read file contents

replace_in_file: Make targeted edits to files

search_files: Search files using regex

list_files: List directory contents

Terminal Operations

execute_command: Run CLI commands

list_code_definition_names: List code definitions

MCP Tools

use_mcp_tool: Use tools from MCP servers

access_mcp_resource: Access MCP server resources

Users can create custom MCP tools that Cline can then access

Example: Create a weather API tool that Cline can use to fetch forecasts

Interaction Tools

ask_followup_question: Ask user for clarification

attempt_completion: Present final results

Each tool has specific parameters and usage patterns. Here are some examples:

Create a new file (write_to_file):

Search for a pattern (search_files):

Run a command (execute_command):

Create a New Component

"Create a new React component called Footer"

Fix a Bug

"Fix the error in src/utils/format.ts"

Refactor Code

"Refactor the Button component to use TypeScript"

Run Commands

"Run npm install to add axios"

Check the documentation

Provide feedback to improve Cline

Last updated2 months ago

For the most up-to-date implementation details, you can view the full source code in the.


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- What Can Cline Do?
- First Steps
- Key Features
- Available Tools
- Common Tasks
- Getting Help

- Edit and create files in your project
- Run terminal commands
- Search and analyze your code
- Help debug and fix issues
- Automate repetitive tasks
- Integrate with external tools

- Type your request in the chat
- Example: "Create a new React component called Header"

- Use @ mentions to add files, folders, or URLs
- Example: "@file:src/components/App.tsx"

- Cline will show diffs before making changes
- You can edit or reject changes

- Create new files
- Modify existing code
- Search and replace across files

- Run npm commands
- Start development servers
- Install dependencies

- Find and fix errors
- Refactor code
- Add documentation

- Test web pages
- Capture screenshots
- Inspect console logs

- write_to_file: Create or overwrite files
- read_file: Read file contents
- replace_in_file: Make targeted edits to files
- search_files: Search files using regex
- list_files: List directory contents

- execute_command: Run CLI commands
- list_code_definition_names: List code definitions

- use_mcp_tool: Use tools from MCP servers
- access_mcp_resource: Access MCP server resources
- Users can create custom MCP tools that Cline can then access
- Example: Create a weather API tool that Cline can use to fetch forecasts

- ask_followup_question: Ask user for clarification
- attempt_completion: Present final results

- Create a new file (write_to_file):Copy<write_to_file><path>src/components/Header.tsx</path><content>// Header component code</content></write_to_file>
- Search for a pattern (search_files):Copy<search_files><path>src</path><regex>function\s+\w+\(</regex><file_pattern>*.ts</file_pattern></search_files>
- Run a command (execute_command):Copy<execute_command><command>npm install axios</command><requires_approval>false</requires_approval></execute_command>

- "Create a new React component called Footer"

- "Fix the error in src/utils/format.ts"

- "Refactor the Button component to use TypeScript"

- "Run npm install to add axios"

- 
- Check the documentation
- Provide feedback to improve Cline


LISTS:
- Exploring Cline's Tools

- Start a TaskType your request in the chatExample: "Create a new React component called Header"
- Provide ContextUse @ mentions to add files, folders, or URLsExample: "@file:src/components/App.tsx"
- Review ChangesCline will show diffs before making changesYou can edit or reject changes

- File EditingCreate new filesModify existing codeSearch and replace across files
- Terminal CommandsRun npm commandsStart development serversInstall dependencies
- Code AnalysisFind and fix errorsRefactor codeAdd documentation
- Browser IntegrationTest web pagesCapture screenshotsInspect console logs

- File Operationswrite_to_file: Create or overwrite filesread_file: Read file contentsreplace_in_file: Make targeted edits to filessearch_files: Search files using regexlist_files: List directory contents
- Terminal Operationsexecute_command: Run CLI commandslist_code_definition_names: List code definitions
- MCP Toolsuse_mcp_tool: Use tools from MCP serversaccess_mcp_resource: Access MCP server resourcesUsers can create custom MCP tools that Cline can then accessExample: Create a weather API tool that Cline can use to fetch forecasts
- Interaction Toolsask_followup_question: Ask user for clarificationattempt_completion: Present final results

- Create a New Component"Create a new React component called Footer"
- Fix a Bug"Fix the error in src/utils/format.ts"
- Refactor Code"Refactor the Button component to use TypeScript"
- Run Commands"Run npm install to add axios"


CODE EXAMPLES:
```
write_to_file
```

```
read_file
```

```
replace_in_file
```

```
search_files
```

```
list_files
```

```
execute_command
```

```
list_code_definition_names
```

```
use_mcp_tool
```

```
access_mcp_resource
```

```
ask_followup_question
```

```
attempt_completion
```

```
<write_to_file><path>src/components/Header.tsx</path><content>// Header component code</content></write_to_file>
```

```
<search_files><path>src</path><regex>function\s+\w+\(</regex><file_pattern>*.ts</file_pattern></search_files>
```

```
<execute_command><command>npm install axios</command><requires_approval>false</requires_approval></execute_command>
```



==================================================
PAGE: exploring-clines-tools/checkpoints
URL: https://docs.cline.bot/exploring-clines-tools/checkpoints
==================================================

TITLE: Checkpoints | Cline


H1 HEADINGS:
Checkpoints

H3 HEADINGS:
‚öôÔ∏è How Checkpoints Work
üí° Use Cases
‚ú® Best Practices

H4 HEADINGS:
Viewing Changes & Restoring to Checkpoint
Rolling Back
1. Using Auto-Approve Mode
2. Testing Different Approaches
üóëÔ∏è Deleting Checkpoints

CONTENT:
When working with AI coding assistants, it's easy to lose control as they make rapid changes to your codebase. That's why we built Checkpoints - your safety net for experimenting confidently.

Last updated28 days ago

Checkpoints automatically save snapshots of your workspace after each step in a task. This powerful feature lets you:

Track and review changes made during a task

Roll back to any previous point if needed

Experiment confidently with auto-approve mode

Maintain full control over your workspace

Cline creates a checkpoint after each tool use (file edits, commands, etc.). These checkpoints:

Work alongside your Git workflow without interference

Maintain context between restores

Use a shadow Git repository to track changes

For example, if you're working on a feature and Cline makes multiple file changes, each change creates a checkpoint. This means you can review each modification and, if needed, roll back to any point without affecting your main Git repository.

After each tool use, you can:

Click the "Compare" button to see modified files

Click the "Restore" button to open restore options

To restore to a previous point:

Click the "Restore" button next to any step

Choose from three options:

Restore Task and Workspace: Reset both codebase and task to that point

Restore Task Only: Keep codebase changes but revert task context

Restore Workspace Only: Reset codebase while preserving task context

Example: If Cline makes changes you don't like while styling a component, you can use "Restore Workspace Only" to revert the code changes while keeping the conversation context, allowing you to try a different approach.

Checkpoints let you be more experimental with Cline. While human coding is often methodical and iterative, AI can make substantial changes quickly. Checkpoints help you track these changes and revert if needed.

Provides safety net for rapid iterations

Makes it easy to undo unexpected results

Try multiple solutions confidently

Compare different implementations

Quickly revert to working states

Ideal for exploring different design patterns or architectural approaches

Use checkpoints as safety nets when experimenting

Leverage auto-approve mode more confidently, knowing you can always roll back

Restore selectively based on needs:

Use "Restore Task and Workspace" for a fresh start, reversing changes to files and the task conversation.

Use "Restore Task Only" to try different prompts, but leave all files as they exist

Use "Restore Workspace Only" to attempt different implementations, or prune context from the task

üõü Checkpoints are your safety net when working with Cline, enabling you to experiment freely while maintaining full control over your codebase. Whether you're refactoring a complex component, trying different implementation approaches, or using auto-approve mode for rapid development, checkpoints ensure you can always review changes and roll back if needed.

You can delete all checkpoints by using the"Delete All History"button in the task history menu. Note that this will also delete all tasks. Checkpoints are stored in VS Code's globalStorage.


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- ‚öôÔ∏è How Checkpoints Work
- üí° Use Cases
- ‚ú® Best Practices

- Track and review changes made during a task
- Roll back to any previous point if needed
- Experiment confidently with auto-approve mode
- Maintain full control over your workspace

- Work alongside your Git workflow without interference
- Maintain context between restores
- Use a shadow Git repository to track changes

- Restore Task and Workspace: Reset both codebase and task to that point
- Restore Task Only: Keep codebase changes but revert task context
- Restore Workspace Only: Reset codebase while preserving task context

- Provides safety net for rapid iterations
- Makes it easy to undo unexpected results

- Try multiple solutions confidently
- Compare different implementations
- Quickly revert to working states
- Ideal for exploring different design patterns or architectural approaches

- Use "Restore Task and Workspace" for a fresh start, reversing changes to files and the task conversation.
- Use "Restore Task Only" to try different prompts, but leave all files as they exist
- Use "Restore Workspace Only" to attempt different implementations, or prune context from the task


LISTS:
- Exploring Cline's Tools

- Click the "Compare" button to see modified files
- Click the "Restore" button to open restore options

- Click the "Restore" button next to any step
- Choose from three options:Restore Task and Workspace: Reset both codebase and task to that pointRestore Task Only: Keep codebase changes but revert task contextRestore Workspace Only: Reset codebase while preserving task context

- Use checkpoints as safety nets when experimenting
- Leverage auto-approve mode more confidently, knowing you can always roll back
- Restore selectively based on needs:Use "Restore Task and Workspace" for a fresh start, reversing changes to files and the task conversation.Use "Restore Task Only" to try different prompts, but leave all files as they existUse "Restore Workspace Only" to attempt different implementations, or prune context from the task



==================================================
PAGE: exploring-clines-tools/plan-and-act-modes-a-guide-to-effective-ai-development
URL: https://docs.cline.bot/exploring-clines-tools/plan-and-act-modes-a-guide-to-effective-ai-development
==================================================

TITLE: Plan & Act Modes: A Guide to Effective AI Development | Cline


H1 HEADINGS:
Plan & Act Modes: A Guide to Effective AI Development

H2 HEADINGS:
Overview

H3 HEADINGS:
Understanding the Modes
Workflow Guide
Best Practices
Power User Tips
Common Patterns
Contributing

H4 HEADINGS:
Plan Mode
Act Mode
1. Start with Plan Mode
2. Switch to Act Mode
3. Iterate as Needed
Planning Phase
Implementation Phase
Enhancing Planning
When to Use Plan Mode
When to Use Act Mode

CONTENT:
Last updated16 days ago

Plan & Act modes represent Cline's approach to structured AI development, emphasizing thoughtful planning before implementation. This dual-mode system helps developers create more maintainable, accurate code while reducing iteration time.

Optimized for context gathering and strategy

Cannot make changes to your codebase

Focused on understanding requirements and creating implementation plans

Enables full file reading for comprehensive project understanding

Streamlined for implementation based on established plans

Has access to all of Cline's building capabilities

Maintains context from the planning phase

Can execute changes to your codebase

Begin every significant development task in Plan mode:

In this mode:

Share your requirements

Let Cline analyze relevant files

Engage in dialogue to clarify objectives

Develop implementation strategy

Once you have a clear plan, switch to Act mode:

Act mode allows Cline to:

Execute against the agreed plan

Make changes to your codebase

Maintain context from planning phase

Complex projects often require multiple plan-act cycles:

Return to Plan mode when encountering unexpected complexity

Use Act mode for implementing solutions

Maintain development momentum while ensuring quality

Be comprehensive with requirements

Share relevant context upfront

Point Cline to relevant files if he hasn't read them

Validate approach before implementation

Follow the established plan

Monitor progress against objectives

Track changes and their impact

Document significant decisions

Use Plan mode to explore edge cases before implementation

Switch back to Plan when encountering unexpected complexity

Leverage file reading to validate assumptions early

Have Cline write markdown files of the plan for future reference

Starting new features

Debugging complex issues

Architectural decisions

Requirements analysis

Implementing agreed solutions

Making routine changes

Following established patterns

Executing test cases

Share your experiences and improvements:

Participate in discussions

Submit feature requests

Report issues

Remember: The time invested in planning pays dividends in implementation quality and maintenance efficiency

Join our


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Overview
- Understanding the Modes
- Workflow Guide
- Best Practices
- Power User Tips
- Common Patterns
- Contributing

- Optimized for context gathering and strategy
- Cannot make changes to your codebase
- Focused on understanding requirements and creating implementation plans
- Enables full file reading for comprehensive project understanding

- Streamlined for implementation based on established plans
- Has access to all of Cline's building capabilities
- Maintains context from the planning phase
- Can execute changes to your codebase

- Share your requirements
- Let Cline analyze relevant files
- Engage in dialogue to clarify objectives
- Develop implementation strategy

- Execute against the agreed plan
- Make changes to your codebase
- Maintain context from planning phase

- Return to Plan mode when encountering unexpected complexity
- Use Act mode for implementing solutions
- Maintain development momentum while ensuring quality

- Use Plan mode to explore edge cases before implementation
- Switch back to Plan when encountering unexpected complexity
- Leverage file reading to validate assumptions early
- Have Cline write markdown files of the plan for future reference

- Starting new features
- Debugging complex issues
- Architectural decisions
- Requirements analysis

- Implementing agreed solutions
- Making routine changes
- Following established patterns
- Executing test cases

- 
- Participate in discussions
- Submit feature requests
- Report issues


LISTS:
- Exploring Cline's Tools

- Be comprehensive with requirements
- Share relevant context upfront
- Point Cline to relevant files if he hasn't read them
- Validate approach before implementation

- Follow the established plan
- Monitor progress against objectives
- Track changes and their impact
- Document significant decisions



==================================================
PAGE: exploring-clines-tools/new-task-tool
URL: https://docs.cline.bot/exploring-clines-tools/new-task-tool
==================================================

TITLE: New Task Tool | Cline


H1 HEADINGS:
New Task Tool

H2 HEADINGS:
Thenew_taskTool & Context Management Strategies

H3 HEADINGS:
Overview
Core Capabilities
Default Behavior (Without.clinerules)
The Power of.clinerules: Enabling Custom Workflows
Example Rule-Driven Workflow: Task Handoff Process
The Handoff Context Block (Rule-Defined Structure)
Potential Use Cases & Workflows
Example.clinerules: Task Handoff Strategy Guide

CONTENT:
Cline includes a powerful internal tool,new_task, designed to help manage workflow continuity and context preservation, especially during complex or long-running tasks. This tool, combined with Cline's awareness of its own context window usage and the flexibility of.clinerules, enables sophisticated strategies for breaking down work and ensuring seamless transitions between task sessions.

Understanding the core capabilities and how they interact with custom rules is key to leveraging this feature effectively.

Two fundamental capabilities enable advanced context management:

Thenew_taskTool:

Function:Allows Cline, upon user approval, to end the current task session and immediately start a new one.

Context Preloading:Crucially, Cline canpreloadthis new task session with specific context provided within the tool's<context>block. This context can be anything Cline or a.clinerulesfile defines ‚Äì summaries, code snippets, next steps, project state, etc.

Context Window Awareness:

Tracking:Cline internally tracks the percentage of its available context window currently being used during a task.

Visibility:This information is visible in theenvironment_detailsprovided to Cline in its prompt.

By default, without specific.clinerulesdictating its behavior:

Tool Availability:Thenew_tasktool exists, and Clinecanchoose to use it.

Context Awareness:Clineisaware of its context usage percentage.

No Automatic Trigger:Clinewill notautomatically initiate a task handoffsolelybased on context usage reaching a specific percentage (like 50%). The decision to suggest usingnew_taskcomes from the AI model's reasoning based on the overall task progress and prompt instructions.

Basic Context Preloading:Ifnew_taskis used without specific rules defining the<context>block structure, Cline will attempt to preload relevant information based on its current understanding (e.g., a basic summary of progress and next steps), but this may be less comprehensive than a rule-driven approach.

While the core capabilities exist by default, the true power, automation, and customization emerge when you combinenew_taskand context awareness with custom workflows defined in.clinerules. This allows you to precisely controlwhenandhowCline manages context and task continuity.

Key benefits of using.clineruleswithnew_task:

Automated Context Management:Define rules to automatically trigger handoffs at specific context percentages (e.g., >50%, >70%) or token counts, ensuring optimal performance and preventing context loss.

Model-Specific Optimization:Tailor handoff triggers based on known thresholds for different LLMs (e.g., trigger earlier for models known to degrade past a certain token count).

Intelligent Breakpoints:Instruct Cline via rules to find logical stopping points (e.g., after completing a function or test)aftera context threshold is passed, ensuring cleaner handoffs.

Structured Task Decomposition:Use Plan Mode to define subtasks, then use.clinerulesto have Cline automatically create a new task vianew_taskupon completing each subtask, preloading the context for thenextsubtask.

Custom Context Packaging:Mandate the exact structure and content of the<context>block in.clinerulesfor highly detailed and consistent handoffs (see example below).

Improved Memory Persistence:Usenew_taskcontext blocks as a primary, integrated way to persist information across sessions, potentially replacing or supplementing file-based memory systems.

Workflow Automation:Define rules for specific scenarios, like always preloading certain setup instructions or project boilerplate when starting tasks of a particular type.

A common workflow,driven by specific.clineruleslike the example below, involves these steps:

Trigger Identification (Rule-Based):Cline monitors for handoff points defined in the rules (e.g., context usage > 50%, task completion).

User Confirmation:Cline usesask_followup_questionto propose creating a new task, often showing the intended context defined by the rules.

User Control:You can approve, deny, or ask Cline to modify the context before the new task is created.

Context Packaging (new_taskTool):If approved, Cline usesnew_task, packaging the context according to the structure mandated by the.clinerules.

New Task Creation:The current task ends, and a new session begins immediately, preloaded with the specified context.

The effectiveness of rule-driven handoffs depends heavily on how.clinerulesdefine the<context>block. A comprehensive structure often includes:

## Completed Work: Detailed list of accomplishments, files modified/created, key decisions.

## Current State: Project status, running processes, key file states.

## Next Steps: Clear, prioritized list of remaining tasks, implementation details, known challenges.

## Reference Information: Links, code snippets, patterns, user preferences.

Actionable Start:A clear instruction for the immediate next action.

The flexibility ofnew_taskcombined with.clinerulesopens up many possibilities:

Proactive Context Window Management:Automatically trigger handoffs at specific percentages (e.g., 50%, 70%) or token counts to maintain optimal performance.

Intelligent Breakpoints:Instruct Cline to find logical stopping points (e.g., after completing a function or test)aftera context threshold is passed, ensuring cleaner handoffs.

Structured Task Decomposition:Use Plan Mode to define subtasks, then use.clinerulesto have Cline automatically create a new task vianew_taskupon completing each subtask.

Automated Session Summaries:Configure the<context>block to always include a summary of the previous session's key discussion points.

Preloading Boilerplate/Setup:Start new tasks related to specific projects preloaded with standard setup instructions or file templates.

"Memory Bank" Alternative:Usenew_taskcontext blocks as the primary way to persist information across sessions, potentially replacing file-based memory systems.

Experimenting with.clinerulesis encouraged to discover workflows that best suit your needs!

Below is an example.clinerulesfile focused specifically on usingnew_taskfor context window management.Remember, this is just one specific strategy; the corenew_tasktool can be used differently with other custom rules.

Last updated2 days ago


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- The new_task Tool & Context Management Strategies
- Overview
- Core Capabilities
- Default Behavior (Without .clinerules)
- The Power of .clinerules: Enabling Custom Workflows
- Example Rule-Driven Workflow: Task Handoff Process
- The Handoff Context Block (Rule-Defined Structure)
- Potential Use Cases & Workflows
- Example .clinerules: Task Handoff Strategy Guide

- Function:Allows Cline, upon user approval, to end the current task session and immediately start a new one.
- Context Preloading:Crucially, Cline canpreloadthis new task session with specific context provided within the tool's<context>block. This context can be anything Cline or a.clinerulesfile defines ‚Äì summaries, code snippets, next steps, project state, etc.

- Tracking:Cline internally tracks the percentage of its available context window currently being used during a task.
- Visibility:This information is visible in theenvironment_detailsprovided to Cline in its prompt.

- Tool Availability:Thenew_tasktool exists, and Clinecanchoose to use it.
- Context Awareness:Clineisaware of its context usage percentage.
- No Automatic Trigger:Clinewill notautomatically initiate a task handoffsolelybased on context usage reaching a specific percentage (like 50%). The decision to suggest usingnew_taskcomes from the AI model's reasoning based on the overall task progress and prompt instructions.
- Basic Context Preloading:Ifnew_taskis used without specific rules defining the<context>block structure, Cline will attempt to preload relevant information based on its current understanding (e.g., a basic summary of progress and next steps), but this may be less comprehensive than a rule-driven approach.

- Automated Context Management:Define rules to automatically trigger handoffs at specific context percentages (e.g., >50%, >70%) or token counts, ensuring optimal performance and preventing context loss.
- Model-Specific Optimization:Tailor handoff triggers based on known thresholds for different LLMs (e.g., trigger earlier for models known to degrade past a certain token count).
- Intelligent Breakpoints:Instruct Cline via rules to find logical stopping points (e.g., after completing a function or test)aftera context threshold is passed, ensuring cleaner handoffs.
- Structured Task Decomposition:Use Plan Mode to define subtasks, then use.clinerulesto have Cline automatically create a new task vianew_taskupon completing each subtask, preloading the context for thenextsubtask.
- Custom Context Packaging:Mandate the exact structure and content of the<context>block in.clinerulesfor highly detailed and consistent handoffs (see example below).
- Improved Memory Persistence:Usenew_taskcontext blocks as a primary, integrated way to persist information across sessions, potentially replacing or supplementing file-based memory systems.
- Workflow Automation:Define rules for specific scenarios, like always preloading certain setup instructions or project boilerplate when starting tasks of a particular type.

- ## Completed Work: Detailed list of accomplishments, files modified/created, key decisions.
- ## Current State: Project status, running processes, key file states.
- ## Next Steps: Clear, prioritized list of remaining tasks, implementation details, known challenges.
- ## Reference Information: Links, code snippets, patterns, user preferences.
- Actionable Start:A clear instruction for the immediate next action.

- Proactive Context Window Management:Automatically trigger handoffs at specific percentages (e.g., 50%, 70%) or token counts to maintain optimal performance.
- Intelligent Breakpoints:Instruct Cline to find logical stopping points (e.g., after completing a function or test)aftera context threshold is passed, ensuring cleaner handoffs.
- Structured Task Decomposition:Use Plan Mode to define subtasks, then use.clinerulesto have Cline automatically create a new task vianew_taskupon completing each subtask.
- Automated Session Summaries:Configure the<context>block to always include a summary of the previous session's key discussion points.
- Preloading Boilerplate/Setup:Start new tasks related to specific projects preloaded with standard setup instructions or file templates.
- "Memory Bank" Alternative:Usenew_taskcontext blocks as the primary way to persist information across sessions, potentially replacing file-based memory systems.


LISTS:
- Exploring Cline's Tools

- Thenew_taskTool:Function:Allows Cline, upon user approval, to end the current task session and immediately start a new one.Context Preloading:Crucially, Cline canpreloadthis new task session with specific context provided within the tool's<context>block. This context can be anything Cline or a.clinerulesfile defines ‚Äì summaries, code snippets, next steps, project state, etc.
- Context Window Awareness:Tracking:Cline internally tracks the percentage of its available context window currently being used during a task.Visibility:This information is visible in theenvironment_detailsprovided to Cline in its prompt.

- Trigger Identification (Rule-Based):Cline monitors for handoff points defined in the rules (e.g., context usage > 50%, task completion).
- User Confirmation:Cline usesask_followup_questionto propose creating a new task, often showing the intended context defined by the rules.Copy<ask_followup_question><question>I've completed [specific accomplishment] and context usage is high (XX%). Would you like me to create a new task to continue with [remaining work], preloading the following context?</question><options>["Yes, create new task", "Modify context first", "No, continue this session"]</options></ask_followup_question>
- User Control:You can approve, deny, or ask Cline to modify the context before the new task is created.
- Context Packaging (new_taskTool):If approved, Cline usesnew_task, packaging the context according to the structure mandated by the.clinerules.
- New Task Creation:The current task ends, and a new session begins immediately, preloaded with the specified context.


CODE EXAMPLES:
```
new_task
```

```
new_task
```

```
.clinerules
```

```
new_task
```

```
<context>
```

```
.clinerules
```

```
environment_details
```

```
.clinerules
```

```
.clinerules
```

```
new_task
```

```
new_task
```

```
new_task
```

```
<context>
```

```
.clinerules
```

```
new_task
```

```
.clinerules
```

```
.clinerules
```

```
new_task
```

```
.clinerules
```

```
new_task
```

```
<context>
```

```
.clinerules
```

```
new_task
```

```
.clinerules
```

```
ask_followup_question
```

```
<ask_followup_question><question>I've completed [specific accomplishment] and context usage is high (XX%). Would you like me to create a new task to continue with [remaining work], preloading the following context?</question><options>["Yes, create new task", "Modify context first", "No, continue this session"]</options></ask_followup_question>
```

```
new_task
```

```
new_task
```

```
.clinerules
```

```
.clinerules
```

```
<context>
```

```
## Completed Work
```

```
## Current State
```

```
## Next Steps
```

```
## Reference Information
```

```
new_task
```

```
.clinerules
```

```
.clinerules
```

```
new_task
```

```
<context>
```

```
new_task
```

```
.clinerules
```

```
.clinerules
```

```
.clinerules
```

```
new_task
```

```
new_task
```

```
# You MUST use the `new_task` tool: Task Handoff Strategy Guide**‚ö†Ô∏è CRITICAL INSTRUCTIONS - YOU MUST FOLLOW THESE GUIDELINES ‚ö†Ô∏è**This guide provides **MANDATORY** instructions for effectively breaking down complex tasks and implementing a smooth handoff process between tasks. You **MUST** follow these guidelines to ensure continuity, context preservation, and efficient task completion.## ‚ö†Ô∏è CONTEXT WINDOW MONITORING - MANDATORY ACTION REQUIRED ‚ö†Ô∏èYou **MUST** monitor the context window usage displayed in the environment details. When usage exceeds 50% of the available context window, you **MUST** initiate a task handoff using the `new_task` tool.Example of context window usage over 50% with a 200K context window:\`\`\`text# Context Window Usage105,000 / 200,000 tokens (53%)Model: anthropic/claude-3.7-sonnet (200K context window)\`\`\`**IMPORTANT**: When you see context window usage at or above 50%, you MUST:1. Complete your current logical step2. Use the `ask_followup_question` tool to offer creating a new task3. If approved, use the `new_task` tool with comprehensive handoff instructions## Task Breakdown in Plan Mode - REQUIRED PROCESSPlan Mode is specifically designed for analyzing complex tasks and breaking them into manageable subtasks. When in Plan Mode, you **MUST**:### 1. Initial Task Analysis - REQUIRED- **MUST** begin by thoroughly understanding the full scope of the user's request- **MUST** identify all major components and dependencies of the task- **MUST** consider potential challenges, edge cases, and prerequisites### 2. Strategic Task Decomposition - REQUIRED- **MUST** break the overall task into logical, discrete subtasks- **MUST** prioritize subtasks based on dependencies (what must be completed first)- **MUST** aim for subtasks that can be completed within a single session (15-30 minutes of work)- **MUST** consider natural breaking points where context switching makes sense### 3. Creating a Task Roadmap - REQUIRED- **MUST** present a clear, numbered list of subtasks to the user- **MUST** explain dependencies between subtasks- **MUST** provide time estimates for each subtask when possible- **MUST** use Mermaid diagrams to visualize task flow and dependencies when helpful\`\`\`mermaidgraph TDA[Main Task] --> B[Subtask 1: Setup]A --> C[Subtask 2: Core Implementation]A --> D[Subtask 3: Testing]A --> E[Subtask 4: Documentation]B --> CC --> D\`\`\`### 4. Getting User Approval - REQUIRED- **MUST** ask for user feedback on the proposed task breakdown- **MUST** adjust the plan based on user priorities or additional requirements- **MUST** confirm which subtask to begin with- **MUST** request the user to toggle to Act Mode when ready to implement## Task Implementation and Handoff Process - MANDATORY PROCEDURESWhen implementing tasks in Act Mode, you **MUST** follow these guidelines for effective task handoff:### 1. Focused Implementation - REQUIRED- **MUST** focus on completing the current subtask fully- **MUST** document progress clearly through comments and commit messages- **MUST** create checkpoints at logical completion points### 2. Recognizing Completion Points - CRITICALYou **MUST** identify natural handoff points when:- The current subtask is fully completed- You've reached a logical stopping point in a larger subtask- The implementation is taking longer than expected and can be continued later- The task scope has expanded beyond the original plan- **CRITICAL**: The context window usage exceeds 50% (e.g., 100,000+ tokens for a 200K context window)### 3. Initiating the Handoff Process - MANDATORY ACTIONWhen you've reached a completion point, you **MUST**:1. Summarize what has been accomplished so far2. Clearly state what remains to be done3. **MANDATORY**: Use the `ask_followup_question` tool to offer creating a new task:\`\`\`xml<ask_followup_question><question>I've completed [specific accomplishment]. Would you like me to create a new task to continue with [remaining work]?</question><options>["Yes, create a new task", "No, continue in this session", "Let me think about it"]</options></ask_followup_question>\`\`\`### 4. Creating a New Task with Context - REQUIRED ACTIONIf the user agrees to create a new task, you **MUST** use the `new_task` tool with comprehensive handoff instructions:\`\`\`xml<new_task><context># Task Continuation: [Brief Task Title]## Completed Work- [Detailed list of completed items]- [Include specific files modified/created]- [Note any important decisions made]## Current State- [Description of the current state of the project]- [Any running processes or environment setup]- [Key files and their current state]## Next Steps- [Detailed list of remaining tasks]- [Specific implementation details to address]- [Any known challenges to be aware of]## Reference Information- [Links to relevant documentation]- [Important code snippets or patterns to follow]- [Any user preferences noted during the current session]Please continue the implementation by [specific next action].</context></new_task>\`\`\`### 5. Detailed Context Transfer - MANDATORY COMPONENTSWhen creating a new task, you **MUST** always include:#### Project Context - REQUIRED- **MUST** include the overall goal and purpose of the project- **MUST** include key architectural decisions and patterns- **MUST** include technology stack and dependencies#### Implementation Details - REQUIRED- **MUST** list files created or modified in the current session- **MUST** describe specific functions, classes, or components implemented- **MUST** explain design patterns being followed- **MUST** outline testing approach#### Progress Tracking - REQUIRED- **MUST** provide checklist of completed items- **MUST** provide checklist of remaining items- **MUST** note any blockers or challenges encountered#### User Preferences - REQUIRED- **MUST** note coding style preferences mentioned by the user- **MUST** document specific approaches requested by the user- **MUST** highlight priority areas identified by the user## Best Practices for Effective Handoffs - MANDATORY GUIDELINES### 1. Maintain Continuity - REQUIRED- **MUST** use consistent terminology between tasks- **MUST** reference previous decisions and their rationale- **MUST** maintain the same architectural approach unless explicitly changing direction### 2. Preserve Context - REQUIRED- **MUST** include relevant code snippets in the handoff- **MUST** summarize key discussions from the previous session- **MUST** reference specific files and line numbers when applicable### 3. Set Clear Next Actions - REQUIRED- **MUST** begin the handoff with a clear, actionable next step- **MUST** prioritize remaining tasks- **MUST** highlight any decisions that need to be made### 4. Document Assumptions - REQUIRED- **MUST** clearly state any assumptions made during implementation- **MUST** note areas where user input might be needed- **MUST** identify potential alternative approaches### 5. Optimize for Resumability - REQUIRED- **MUST** structure the handoff so the next session can begin working immediately- **MUST** include setup instructions if environment configuration is needed- **MUST** provide a quick summary at the top for rapid context restoration## Example Task Handoff### Example #1 of an effective task handoff:\`\`\`xml<new_task><context># Task Continuation: Implement User Authentication System## Completed Work- Created basic Express.js server structure- Implemented MongoDB connection and user schema- Completed user registration endpoint with password hashing- Added input validation using Joi- Created initial test suite for registration endpoint## Current State- Server runs successfully on port 3000- MongoDB connection is established- Registration endpoint (/api/users/register) is fully functional- Test suite passes for all registration scenarios## Next Steps1. Implement login endpoint (/api/users/login)- Use bcrypt to compare passwords- Generate JWT token upon successful login- Add proper error handling for invalid credentials2. Create authentication middleware- Verify JWT tokens- Extract user information- Handle expired tokens3. Add protected routes that require authentication4. Implement password reset functionality## Reference Information- JWT secret should be stored in .env file- Follow the existing error handling pattern in routes/users.js- User schema is defined in models/User.js- Test patterns are established in tests/auth.test.jsPlease continue by implementing the login endpoint following the same patterns established in the registration endpoint.</context></new_task>\`\`\`### Example #2 of an ineffective task handoff:*(Note: The example provided in the original rules showing "YOLO MODE Implementation" seems less like a direct handoff context block and more like a general status update with future considerations. A true ineffective handoff might lack detail in 'Current State' or 'Next Steps').*## When to Use Task Handoffs - MANDATORY TRIGGERSYou **MUST** initiate task handoffs in these scenarios:1. **CRITICAL**: When context window usage exceeds 50% (e.g., 100,000+ tokens for a 200K context window)2. **Long-running projects** that exceed a single session3. **Complex implementations** with multiple distinct phases4. **When context window limitations** are approaching5. **When switching focus areas** within a larger project6. **When different expertise** might be beneficial for different parts of the task**‚ö†Ô∏è FINAL REMINDER - CRITICAL INSTRUCTION ‚ö†Ô∏è**You **MUST** monitor the context window usage in the environment details section. When it exceeds 50% (e.g., "105,000 / 200,000 tokens (53%)"), you **MUST** proactively initiate the task handoff process using the `ask_followup_question` tool followed by the `new_task` tool. You MUST use the `new_task` tool.By strictly following these guidelines, you'll ensure smooth transitions between tasks, maintain project momentum, and provide the best possible experience for users working on complex, multi-session projects.```markdown## User Interaction & Workflow Considerations*   **Linear Flow:** Currently, using `new_task` creates a linear sequence. The old task ends, and the new one begins. The old task history remains accessible for backtracking.*   **User Approval:** You always have control, approving the handoff and having the chance to modify the context Cline proposes to carry forward.*   **Flexibility:** The core `new_task` tool is a flexible building block. Experiment with `.clinerules` to create workflows that best suit your needs, whether for strict context management, task decomposition, or other creative uses.
```



==================================================
PAGE: exploring-clines-tools/remote-browser-support
URL: https://docs.cline.bot/exploring-clines-tools/remote-browser-support
==================================================

TITLE: Remote Browser Support | Cline


H1 HEADINGS:
Remote Browser Support

H2 HEADINGS:
Remote Browser in Cline

H3 HEADINGS:
What is Remote Browser?
How to Use Remote Browser
Important Things to Know
Common Use Cases
Troubleshooting
Using Remote Browser with VS Code in WSL

H4 HEADINGS:
Basic Commands
Example Workflows
One Browser at a Time
Browser Must Be Closed Before Using Other Tools
What Cline Sees
Console Logs
Open PowerShell as Administrator and Run:
Configure Cline in VS Code:

CONTENT:
Remote browser support allows Cline to utilize a remote Chrome instance, leveraging authentication tokens and session cookies relevant to certain web development test cases.

The Remote Browser feature in Cline allows the AI assistant to interact with web content directly through a controlled browser instance. This enables several powerful capabilities:

Viewing and interacting with websites

Testing locally running web applications

Monitoring console logs and errors

Performing browser actions like clicking, typing, and scrolling

Remote Browser allows Cline to view and interact with websites directly. This feature enables Cline to:

Visit websites and view their content

Test your locally running web applications

Fill out forms and click on elements

Capture screenshots of what it sees

Scroll through pages to see more content

You can ask Cline to use the browser with simple instructions:

Click on elements: "Click the login button"

Type text: "Type 'Hello world' in the search box"

Scroll the page: "Scroll down to see more content"

Close the browser: "Close the browser now"

Testing a Web Application:

Analyzing a Website:

Filling Out a Form:

Cline can only use one browser at a time. If you want to visit a different website, you can either:

Ask Cline to navigate to a new URL within the same browser session

Ask Cline to close the current browser and open a new one

If you want Cline to edit files or run commands after using the browser, you must first ask it to close the browser:

The browser has a fixed viewport size (900x600 pixels by default), similar to a small laptop screen. Cline will share screenshots after each action so you can see exactly what it sees.

Cline captures browser console logs, which can be helpful for debugging web applications. These logs are included with each screenshot.

Web Development: Test your websites and web applications

UI/UX Review: Get feedback on website design and usability

Content Research: Have Cline browse websites to gather information

Form Testing: Verify that forms work correctly

Responsive Design Testing: Check how websites look at different screen sizes

If a website doesn't load: Try providing a direct URL with the http:// or https:// prefix

If clicking doesn't work: Try describing the location of the element more precisely

If the browser seems stuck: Ask Cline to close the browser and try again

When running VS Code in WSL, you'll need to configure Windows to allow WSL to connect to Chrome. Follow these steps:

Open VS Code settings

Search for "Cline: Chrome Executable Path"

Set the value to the path of your Chrome executable (e.g.,C:\Program Files\Google\Chrome\Application\chrome.exe)

Cline should now be able to use the Remote Browser feature from within WSL.

Last updated8 days ago

Open a website: "Use the browser to check the website at"


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Remote Browser in Cline
- What is Remote Browser?
- How to Use Remote Browser
- Important Things to Know
- Common Use Cases
- Troubleshooting
- Using Remote Browser with VS Code in WSL

- Viewing and interacting with websites
- Testing locally running web applications
- Monitoring console logs and errors
- Performing browser actions like clicking, typing, and scrolling

- Visit websites and view their content
- Test your locally running web applications
- Fill out forms and click on elements
- Capture screenshots of what it sees
- Scroll through pages to see more content

- 
- Click on elements: "Click the login button"
- Type text: "Type 'Hello world' in the search box"
- Scroll the page: "Scroll down to see more content"
- Close the browser: "Close the browser now"

- Ask Cline to navigate to a new URL within the same browser session
- Ask Cline to close the current browser and open a new one

- Web Development: Test your websites and web applications
- UI/UX Review: Get feedback on website design and usability
- Content Research: Have Cline browse websites to gather information
- Form Testing: Verify that forms work correctly
- Responsive Design Testing: Check how websites look at different screen sizes

- If a website doesn't load: Try providing a direct URL with the http:// or https:// prefix
- If clicking doesn't work: Try describing the location of the element more precisely
- If the browser seems stuck: Ask Cline to close the browser and try again


LISTS:
- Exploring Cline's Tools

- Open VS Code settings
- Search for "Cline: Chrome Executable Path"
- Set the value to the path of your Chrome executable (e.g.,C:\Program Files\Google\Chrome\Application\chrome.exe)


CODE EXAMPLES:
```
Can you start my React app with "npm start" and then check if it's working properly at http://localhost:3000?
```

```
Can you visit https://example.com and tell me what you think about its design and layout?
```

```
Please go to https://example.com/contact, fill out the contact form with some test data, and submit it.
```

```
Close the browser and then update the CSS file to fix the alignment issue we saw.
```

```
# Allow WSL to connect to Chrome's debugging portNew-NetFirewallRule -DisplayName "WSL Chrome Debug" -Direction Inbound -LocalPort 9222 -Protocol TCP -Action Allow
```

```
C:\Program Files\Google\Chrome\Application\chrome.exe
```



==================================================
PAGE: enterprise-solutions/security-concerns
URL: https://docs.cline.bot/enterprise-solutions/security-concerns
==================================================

TITLE: Security Concerns | Cline


H1 HEADINGS:
Security Concerns

H2 HEADINGS:
Enterprise Security with Cline

H3 HEADINGS:
Client-Side Architecture
Data Privacy Commitment
Cloud Provider Integration
Open-Source Transparency
Controlled Modifications
Enterprise Deployment Support
Access Control
Compliance and Governance

H4 HEADINGS:
Cline addresses enterprise security concerns through its unique client-side architecture that prioritizes data privacy, secure cloud integration, and transparent operations. Below is a comprehensive overview of how Cline maintains robust security measures for enterprise environments.

CONTENT:
Last updated17 days ago

Cline operates exclusively as a client-side VSCode extension with zero server-side components. This fundamental design choice ensures that your code and data remain within your secure environment at all times. Unlike traditional AI assistants that send data to external servers for processing, Cline connects directly to your chosen cloud provider's AI endpoints, keeping all sensitive information within your infrastructure boundaries.

Cline implements a strict zero data retention policy, meaning your intellectual property never leaves your secure environment. The extension does not collect, store, or transmit your code to any central servers. This approach significantly reduces potential attack vectors that might otherwise be introduced through data transmission to third-party systems. Telemetry collection is optional and requires explicit consent.

Enterprise teams can access cutting-edge AI models through their existing cloud deployments. Cline supports seamless integration with:

AWS Bedrock

Google Cloud Vertex AI

Microsoft Azure

These integrations utilize your organization's existing security credentials, including native IAM role assumption for AWS. This ensures that all AI processing occurs within your corporate cloud environment, maintaining compliance with your established security protocols.

Cline's codebase is completely open-source, allowing for comprehensive security auditing by your internal teams. This transparency enables security professionals to verify exactly how the extension functions and confirm that it adheres to your organization's security requirements. Organizations can review the code to ensure it aligns with their security policies before deployment.

The extension implements safeguards against unauthorized changes to your codebase. Cline requires explicit user approval for all file modifications and terminal commands, preventing accidental or unwanted alterations. This approval-based workflow maintains the integrity of your projects while still providing AI assistance.

For organizations with strict security review processes, Cline provides comprehensive documentation including detailed deployment diagrams, sequence diagrams illustrating all data flows, and complete security posture documentation. These materials facilitate thorough security reviews and help demonstrate compliance with enterprise data handling standards and regulations.

Enterprise editions of Cline (planned for Q2 2025) will include centralized administration features that allow organizations to:

Manage user access with customizable permission levels

Provision accounts with corporate credentials

Immediately revoke access when needed

Control which AI providers and LLM endpoints can be used

Deploy standardized settings across the organization

Prevent unauthorized use of personal API keys

Cline's architecture supports compliance with data sovereignty requirements and enterprise data handling regulations. The planned Enterprise Complete edition will further enhance governance with detailed audit logging, compliance reporting, and automated policy enforcement mechanisms.

By combining client-side processing, direct cloud provider integration, and transparent operations, Cline offers enterprise teams a secure way to leverage AI assistance while maintaining strict control over their sensitive code and data.


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Enterprise Security with Cline
- Client-Side Architecture
- Data Privacy Commitment
- Cloud Provider Integration
- Open-Source Transparency
- Controlled Modifications
- Enterprise Deployment Support
- Access Control
- Compliance and Governance

- AWS Bedrock
- Google Cloud Vertex AI
- Microsoft Azure

- Manage user access with customizable permission levels
- Provision accounts with corporate credentials
- Immediately revoke access when needed
- Control which AI providers and LLM endpoints can be used
- Deploy standardized settings across the organization
- Prevent unauthorized use of personal API keys


LISTS:
- Enterprise Solutions



==================================================
PAGE: enterprise-solutions/cloud-provider-integration
URL: https://docs.cline.bot/enterprise-solutions/cloud-provider-integration
==================================================

TITLE: Cloud Provider Integration | Cline


H1 HEADINGS:
Cloud Provider Integration

H2 HEADINGS:
AWS Bedrock Setup Guides

H4 HEADINGS:
(For administrators)
VPC Endpoint Setup

CONTENT:
Last updated17 days ago

Cline supports major cloud providers like AWS Bedrock and Google's Cloud Vertex; whichever your team currently uses is appropriate, and there's no need to change providers to utilize Cline's features.  

For the purpose of this document, we assume your organization will use cloud-based frontier models. Cloud inference providers offer cutting-edge capabilities and the flexibility to select models which best suit your needs.

Certain scenarios may warrant using local models, including handling highly sensitive data, applications requiring consistent low-latency responses, or compliance with strict data sovereignty requirements. If your team needs to utilize local models,  seewith Cline.

To protect your team's data, Cline supports VPC (Virtual Private Cloud) endpoints, which create private connections between your data and AWS Bedrock. AWS VPCs enhance security by eliminating the need for public IP addresses, network gateways, or complex firewall rules‚Äîessentially creating a private highway for data that bypasses the public internet entirely. By keeping traffic within AWS‚Äôs private network, teams also benefit from lower latency and more predictable performance when accessing services like AWS Bedrock or custom APIs. For those working with confidential information or operating in highly regulated industries like healthcare or finance, VPCs offers the perfect balance between the accessibility of cloud services and the security of private infrastructure.

Consult theto creating VPC endpoints. This document specifies pre-requisites and describes the syntax used for creating VPC endpoints.

Follow the directions forin the AWS console. The image below pertains to steps 4 and 5 of the AWS guide linked above.

Note the IP address of your VPC endpoint, open Cline's settings menu, and selectAWS Bedrockfrom the API Provider dropdown.

Click theUse Custom VPC endpointcheckbox and enter the IP address of your VPC endpoint


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry


LISTS:
- Enterprise Solutions

- Consult theto creating VPC endpoints. This document specifies pre-requisites and describes the syntax used for creating VPC endpoints.
- Follow the directions forin the AWS console. The image below pertains to steps 4 and 5 of the AWS guide linked above.
- Note the IP address of your VPC endpoint, open Cline's settings menu, and selectAWS Bedrockfrom the API Provider dropdown.
- Click theUse Custom VPC endpointcheckbox and enter the IP address of your VPC endpoint


CODE EXAMPLES:
```
AWS Bedrock
```

```
Use Custom VPC endpoint
```



==================================================
PAGE: enterprise-solutions/mcp-servers
URL: https://docs.cline.bot/enterprise-solutions/mcp-servers
==================================================

TITLE: MCP Servers | Cline


H1 HEADINGS:
MCP Servers

H3 HEADINGS:
Secure Architecture Fundamentals
Transport Layer Security
Message Validation and Access Control
Monitoring and Compliance

CONTENT:
Last updated17 days ago

Model Context Protocol (MCP) servers expand Cline's capabilities by providing standardized access to external data sources and executable functions. By implementing MCP servers, LLM tools can dynamically retrieve and incorporate relevant information from both local and remote data sources. This capability ensures that the models operate with the most current and contextually appropriate data, improving the accuracy and relevance of their outputs.

MCP servers follow a client-server architecture where hosts (LLM applications like Cline) initiate connections through a transport layer to MCP servers. This architecture inherently provides security benefits as it maintains clear separation between components. Enterprise deployments should focus on the proper implementation of this architecture to ensure secure operations, particularly regarding the message exchange patterns and connection lifecycle management. For MCP architecture details, see, and for latest specifications, see.

For enterprise environments, selecting the appropriate transport mechanism is crucial. While stdio transport works efficiently for local processes, HTTP with Server-Sent Events (SSE) transport requires additional security measures. TLS should be used for all remote connections whenever possible. This is especially important when MCP servers are deployed across different network segments within corporate infrastructure.

The MCP architecture defines standard error codes and message types (Requests, Results, Errors, and Notifications), providing a structured framework for secure communication. Security teams should consider message validation, sanitizing inputs, checking message size limits, and verifying JSON-RPC format. Additionally, implementing resource protection through access controls, path validation, and request rate limiting helps prevent potential abuse of MCP server capabilities.

For enterprise compliance requirements, implementing comprehensive logging of protocol events, message flows, and errors is essential. The MCP architecture supports diagnostic capabilities including health checks, connection state monitoring, and resource usage tracking. Organizations should extend these capabilities to meet their specific compliance needs, particularly for audit trails of all MCP server interactions and resource access patterns.

By leveraging the client-server design of the MCP architecture and implementing appropriate security controls at each layer, enterprises can safely integrate MCP servers into their environments while maintaining their security posture and meeting regulatory requirements.


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Secure Architecture Fundamentals
- Transport Layer Security
- Message Validation and Access Control
- Monitoring and Compliance


LISTS:
- Enterprise Solutions



==================================================
PAGE: enterprise-solutions/custom-instructions
URL: https://docs.cline.bot/enterprise-solutions/custom-instructions
==================================================

TITLE: Custom Instructions | Cline


H1 HEADINGS:
Custom Instructions

H2 HEADINGS:
Building Custom Instructions for Teams

CONTENT:
Creating standardized project instructions ensures that all team members work within consistent guidelines. Start by documenting your project's technical foundation, then identify which information needs to be included in the instructions. The exact scope will vary depending on your team's needs, but generally it's best to provide as much information as possible. By creating comprehensive instructions that all team members follow, you establish a shared understanding of how code should be written, tested, and deployed across your project, resulting in more maintainable and consistent software.

Here are a few topics and examples to consider for your team's custom instructions:

Testing framework and specific commands

"All components must include Jest tests with at least 85% coverage. Run tests usingnpm run test:coveragebefore submitting any pull request."

Explicit library preferences

"Use React Query for data fetching and state management. Avoid Redux unless specifically required for complex global state. For styling, use Tailwind CSS with our custom theme configuration found insrc/styles/theme.js."

Where to find documentation

"All API documentation is available in our internal Notion workspace under 'Engineering > API Reference'. For component usage examples, refer to our Storybook instance athttps://storybook.internal.company.com"

Which MCP servers to use, and for which purposes

"For database operations, use the Postgres MCP server with credentials stored in 1Password under 'Development > Database'. For deployments, use the AWS MCP server which requires the deployment role from IAM. Refer todocs/mcp-setup.mdfor configuration instructions."

Coding conventions specific to your project

"Name all React components using PascalCase and all helper functions using camelCase. Place components in thesrc/componentsdirectory organized by feature, not by type. Always use TypeScript interfaces for prop definitions."

Last updated17 days ago


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- "All components must include Jest tests with at least 85% coverage. Run tests usingnpm run test:coveragebefore submitting any pull request."

- "Use React Query for data fetching and state management. Avoid Redux unless specifically required for complex global state. For styling, use Tailwind CSS with our custom theme configuration found insrc/styles/theme.js."

- "All API documentation is available in our internal Notion workspace under 'Engineering > API Reference'. For component usage examples, refer to our Storybook instance athttps://storybook.internal.company.com"

- "For database operations, use the Postgres MCP server with credentials stored in 1Password under 'Development > Database'. For deployments, use the AWS MCP server which requires the deployment role from IAM. Refer todocs/mcp-setup.mdfor configuration instructions."

- "Name all React components using PascalCase and all helper functions using camelCase. Place components in thesrc/componentsdirectory organized by feature, not by type. Always use TypeScript interfaces for prop definitions."


LISTS:
- Enterprise Solutions

- Testing framework and specific commands"All components must include Jest tests with at least 85% coverage. Run tests usingnpm run test:coveragebefore submitting any pull request."
- Explicit library preferences"Use React Query for data fetching and state management. Avoid Redux unless specifically required for complex global state. For styling, use Tailwind CSS with our custom theme configuration found insrc/styles/theme.js."
- Where to find documentation"All API documentation is available in our internal Notion workspace under 'Engineering > API Reference'. For component usage examples, refer to our Storybook instance athttps://storybook.internal.company.com"
- Which MCP servers to use, and for which purposes"For database operations, use the Postgres MCP server with credentials stored in 1Password under 'Development > Database'. For deployments, use the AWS MCP server which requires the deployment role from IAM. Refer todocs/mcp-setup.mdfor configuration instructions."
- Coding conventions specific to your project"Name all React components using PascalCase and all helper functions using camelCase. Place components in thesrc/componentsdirectory organized by feature, not by type. Always use TypeScript interfaces for prop definitions."


CODE EXAMPLES:
```
npm run test:coverage
```

```
src/styles/theme.js.
```

```
https://storybook.internal.company.com
```

```
docs/mcp-setup.md
```

```
src/components
```



==================================================
PAGE: mcp-servers/mcp
URL: https://docs.cline.bot/mcp-servers/mcp
==================================================

TITLE: MCP Overview | Cline


H1 HEADINGS:
MCP Overview

H2 HEADINGS:
Overview
Key Concepts
Use Cases
Getting Started
Integration with Cline
Security Considerations
Resources

H3 HEADINGS:
Building MCP Servers
Using MCP Servers

CONTENT:
Last updated10 days ago

Quick Links:

This document explains Model Context Protocol (MCP) servers, their capabilities, and how Cline can help build and use them.

Model Context Protocol is an open protocol that standardizes how applications provide context to LLMs. Think of MCP like a USB-C port for AI applications; it provides a standardized way to connect AI models to different data sources and tools. MCP servers act as intermediaries between large language models (LLMs), such as Claude, and external tools or data sources. They are small programs that expose functionalities to LLMs, enabling them to interact with the outside world through the MCP. An MCP server is essentially like an API that an LLM can use.

MCP servers define a set of "tools," which are functions the LLM can execute. These tools offer a wide range of capabilities.

Here's how MCP works:

MCP hostsdiscover the capabilities of connected servers and load their tools, prompts, and resources.

Resourcesprovide consistent access to read-only data, akin to file paths or database queries.

Securityis ensured as servers isolate credentials and sensitive data. Interactions require explicit user approval.

The potential of MCP servers is vast. They can be used for a variety of purposes.

Here are some concrete examples of how MCP servers can be used:

Web Services and API Integration:

Monitor GitHub repositories for new issues

Post updates to Twitter based on specific triggers

Retrieve real-time weather data for location-based services

Browser Automation:

Automate web application testing

Scrape e-commerce sites for price comparisons

Generate screenshots for website monitoring

Database Queries:

Generate weekly sales reports

Analyze customer behavior patterns

Create real-time dashboards for business metrics

Project and Task Management:

Automate Jira ticket creation based on code commits

Generate weekly progress reports

Create task dependencies based on project requirements

Codebase Documentation:

Generate API documentation from code comments

Create architecture diagrams from code structure

Maintain up-to-date README files

Cline does not come with any pre-installed MCP servers. You'll need to find and install them separately.

Choose the right approach for your needs:

Ask Cline:You can ask Cline to help you find or  create MCP servers

Customize Existing Servers:Modify existing servers to fit your specific requirements

Cline simplifies the building and use of MCP servers through its AI capabilities.

Natural language understanding:Instruct Cline in natural language to build an MCP server by describing its functionalities. Cline will interpret your instructions and generate the necessary code.

Cloning and building servers:Cline can clone existing MCP server repositories from GitHub and build them automatically.

Configuration and dependency management:Cline handles configuration files, environment variables, and dependencies.

Troubleshooting and debugging:Cline helps identify and resolve errors during development.

Tool execution:Cline seamlessly integrates with MCP servers, allowing you to execute their defined tools.

Context-aware interactions:Cline can intelligently suggest using relevant tools based on conversation context.

Dynamic integrations:Combine multiple MCP server capabilities for complex tasks. For example, Cline could use a GitHub server to get data and a Notion server to create a formatted report.

When working with MCP servers, it's important to follow security best practices:

Authentication:Always use secure authentication methods for API access

Environment Variables:Store sensitive information in environment variables

Access Control:Limit server access to authorized users only

Data Validation:Validate all inputs to prevent injection attacks

Logging:Implement secure logging practices without exposing sensitive data

There are various resources available for finding and learning about MCP servers.

Here are some links to resources for finding and learning about MCP servers:

Community Repositories:Check for community-maintained lists of MCP servers on GitHub. See

Cline Marketplace:Install one from Cline's

Build Your Own:Create custom MCP servers using the

GitHub Repositories:and

Online Directories:,, and

PulseMCP:

YouTube Tutorial (AI-Driven Coder):A video guide for building and using MCP servers:


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Overview
- Key Concepts
- Use Cases
- Getting Started
- Integration with Cline
- Building MCP Servers
- Using MCP Servers
- Security Considerations
- Resources

- 
- 

- MCP hostsdiscover the capabilities of connected servers and load their tools, prompts, and resources.
- Resourcesprovide consistent access to read-only data, akin to file paths or database queries.
- Securityis ensured as servers isolate credentials and sensitive data. Interactions require explicit user approval.

- Web Services and API Integration:Monitor GitHub repositories for new issuesPost updates to Twitter based on specific triggersRetrieve real-time weather data for location-based services
- Browser Automation:Automate web application testingScrape e-commerce sites for price comparisonsGenerate screenshots for website monitoring
- Database Queries:Generate weekly sales reportsAnalyze customer behavior patternsCreate real-time dashboards for business metrics
- Project and Task Management:Automate Jira ticket creation based on code commitsGenerate weekly progress reportsCreate task dependencies based on project requirements
- Codebase Documentation:Generate API documentation from code commentsCreate architecture diagrams from code structureMaintain up-to-date README files

- Monitor GitHub repositories for new issues
- Post updates to Twitter based on specific triggers
- Retrieve real-time weather data for location-based services

- Automate web application testing
- Scrape e-commerce sites for price comparisons
- Generate screenshots for website monitoring

- Generate weekly sales reports
- Analyze customer behavior patterns
- Create real-time dashboards for business metrics

- Automate Jira ticket creation based on code commits
- Generate weekly progress reports
- Create task dependencies based on project requirements

- Generate API documentation from code comments
- Create architecture diagrams from code structure
- Maintain up-to-date README files

- 
- 
- Ask Cline:You can ask Cline to help you find or  create MCP servers
- 
- Customize Existing Servers:Modify existing servers to fit your specific requirements

- Natural language understanding:Instruct Cline in natural language to build an MCP server by describing its functionalities. Cline will interpret your instructions and generate the necessary code.
- Cloning and building servers:Cline can clone existing MCP server repositories from GitHub and build them automatically.
- Configuration and dependency management:Cline handles configuration files, environment variables, and dependencies.
- Troubleshooting and debugging:Cline helps identify and resolve errors during development.

- Tool execution:Cline seamlessly integrates with MCP servers, allowing you to execute their defined tools.
- Context-aware interactions:Cline can intelligently suggest using relevant tools based on conversation context.
- Dynamic integrations:Combine multiple MCP server capabilities for complex tasks. For example, Cline could use a GitHub server to get data and a Notion server to create a formatted report.

- Authentication:Always use secure authentication methods for API access
- Environment Variables:Store sensitive information in environment variables
- Access Control:Limit server access to authorized users only
- Data Validation:Validate all inputs to prevent injection attacks
- Logging:Implement secure logging practices without exposing sensitive data

- 
- 
- 
- 


LISTS:
- MCP Servers



==================================================
PAGE: mcp-servers/mcp-quickstart
URL: https://docs.cline.bot/mcp-servers/mcp-quickstart
==================================================

TITLE: MCP Marketplace | Cline


H1 HEADINGS:
MCP Marketplace

H3 HEADINGS:
What's an MCP Server?
MCP Marketplace Walkthrough
What Happens Behind the Scenes
Troubleshooting
MCP Server Rules

H4 HEADINGS:
1. Access the Marketplace
2. Browse and Select a Server
3. Install and Configure
4. Verify Installation
5. Using Your New Server
1. Installation Process
2. Configuration
3. Server Launch
4. Integration with Cline
System Requirements
Common Installation Issues
How to Remove an MCP Server
I'm Still Getting an Error
How MCP Rules Work
Configuration Structure
Benefits of MCP Rules
Example Usage
Quick Start Template

CONTENT:
MCP servers are specialized extensions that enhance Cline's capabilities. They enable Cline to perform additional tasks like fetching web pages, processing images, accessing APIs, and much more.

The MCP Marketplace provides a one-click installation experience for hundreds of MCP servers across various categories.

In Cline, click the "Extensions" button (square icon) in the top toolbar

The MCP marketplace will open, showing available servers by category

Browse servers by category (Search, File-systems, Browser-automation, Research-data, etc.)

Click on a server to see details about its capabilities and requirements

Click the install button for your chosen server

If the server requires an API key (most do), Cline will guide you through:

Where to get the API key

How to enter it securely

The server will be added to your MCP settings automatically

Cline will show confirmation when installation is complete

Check the server status in Cline's MCP settings UI

After successful installation, Cline will automatically integrate the server's capabilities

You'll see new tools and resources available in Cline's system prompt

Simply ask Cline to use the capabilities of your new server

Example: "Search the web for recent React updates using Perplexity"

Corporate Users:If you're using Cline in a corporate environment, ensure you have permission to install third-party MCP servers according to your organization's security policies.

When you install an MCP server, several things happen automatically:

The server code is cloned/installed to/Users/<username>/Documents/Cline/MCP/

Dependencies are installed

The server is built (TypeScript/JavaScript compilation or Python package installation)

The MCP settings file is updated with your server configuration

This file is located at:/Users/<username>/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json

Environment variables (like API keys) are securely stored

The server path is registered

Cline detects the configuration change

Cline launches your server as a separate process

Communication is established via stdio or HTTP

Your server's capabilities are added to Cline's system prompt

Tools become available viause_mcp_toolcommands

Resources become available viaaccess_mcp_resourcecommands

Cline can now use these capabilities when prompted by the user

Make sure your system meets these requirements:

Node.js 18.x or newer

Check by running:node --version

Install from: https://nodejs.org/

Required for JavaScript/TypeScript implementations

Python 3.10 or newer

Check by running:python --version

Install from: https://python.org/

Note: Some specialized implementations may require Python 3.11+

UV Package Manager

Modern Python package manager for dependency isolation

Install using:

Or:pip install uv

Verify with:uv --version

If any of these commands fail or show older versions, please install/update before continuing!

Ensure your internet connection is stable

Check that you have the necessary permissions to install new software

Verify that the API key was entered correctly (if required)

Check the server status in the MCP settings UI for any error messages

To completely remove a faulty MCP server:

Open the MCP settings file:/Users/<username>/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json

Delete the entire entry for your server from themcpServersobject

Save the file

Restart Cline

If you're getting an error when using an MCP server, you can try the following:

Check the MCP settings file for errors

Use a Claude Sonnet model for installation

Verify that paths to your server's files are correct

Ensure all required environment variables are set

Check if another process is using the same port (for HTTP-based servers)

Try removing and reinstalling the server (remove from both thecline_mcp_settings.jsonfile and the/Users/<username>/Documents/Cline/MCP/directory)

Use a terminal and run the command with its arguments directly. This will allow you to see the same errors that Cline is seeing

Cline is already aware of your active MCP servers and what they are for, but when you have a lot of MCP servers enabled, it can be useful to define when to use each server.

Utilize a.clinerulesfile or custom instructions to support intelligent MCP server activation through keyword-based triggers, making Cline's tool selection more intuitive and context-aware.

MCP Rules group your connected MCP servers into functional categories and define trigger keywords that activate them automatically when detected in your conversations with Cline.

Categories: Group related servers (e.g., "webInteraction", "mediaAndDesign")

Servers: List server names in each category

Triggers: Keywords that activate these servers

Description: Human-readable category explanation

Contextual Tool Selection: Cline selects appropriate tools based on conversation context

Reduced Friction: No need to manually specify which tool to use

Organized Capabilities: Logically group related tools and servers

Prioritization: Handle ambiguous cases with explicit priority ordering

When you write "Can you scrape this website?", Cline detects "scrape" and "website" as triggers, automatically selecting web-related MCP servers.

For finance tasks like "What's Apple's stock price?", keywords like "stock" and "price" trigger finance-related servers.

Add this to your.clinerulesfile or to your custom instructions to make Cline's MCP server selection more intuitive and context-aware.

Last updated24 days ago


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- What's an MCP Server?
- MCP Marketplace Walkthrough
- What Happens Behind the Scenes
- Troubleshooting
- MCP Server Rules

- In Cline, click the "Extensions" button (square icon) in the top toolbar
- The MCP marketplace will open, showing available servers by category

- Browse servers by category (Search, File-systems, Browser-automation, Research-data, etc.)
- Click on a server to see details about its capabilities and requirements

- Click the install button for your chosen server
- If the server requires an API key (most do), Cline will guide you through:Where to get the API keyHow to enter it securely
- The server will be added to your MCP settings automatically

- Where to get the API key
- How to enter it securely

- Cline will show confirmation when installation is complete
- Check the server status in Cline's MCP settings UI

- After successful installation, Cline will automatically integrate the server's capabilities
- You'll see new tools and resources available in Cline's system prompt
- Simply ask Cline to use the capabilities of your new server
- Example: "Search the web for recent React updates using Perplexity"

- The server code is cloned/installed to/Users/<username>/Documents/Cline/MCP/
- Dependencies are installed
- The server is built (TypeScript/JavaScript compilation or Python package installation)

- The MCP settings file is updated with your server configuration
- This file is located at:/Users/<username>/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json
- Environment variables (like API keys) are securely stored
- The server path is registered

- Cline detects the configuration change
- Cline launches your server as a separate process
- Communication is established via stdio or HTTP

- Your server's capabilities are added to Cline's system prompt
- Tools become available viause_mcp_toolcommands
- Resources become available viaaccess_mcp_resourcecommands
- Cline can now use these capabilities when prompted by the user

- Node.js 18.x or newerCheck by running:node --versionInstall from: https://nodejs.org/Required for JavaScript/TypeScript implementations
- Python 3.10 or newerCheck by running:python --versionInstall from: https://python.org/Note: Some specialized implementations may require Python 3.11+
- UV Package ManagerModern Python package manager for dependency isolationInstall using:Copycurl -LsSf https://astral.sh/uv/install.sh | shOr:pip install uvVerify with:uv --version

- Check by running:node --version
- Install from: https://nodejs.org/
- Required for JavaScript/TypeScript implementations

- Check by running:python --version
- Install from: https://python.org/
- Note: Some specialized implementations may require Python 3.11+

- Modern Python package manager for dependency isolation
- Install using:Copycurl -LsSf https://astral.sh/uv/install.sh | shOr:pip install uv
- Verify with:uv --version

- Ensure your internet connection is stable
- Check that you have the necessary permissions to install new software
- Verify that the API key was entered correctly (if required)
- Check the server status in the MCP settings UI for any error messages

- Check the MCP settings file for errors
- Use a Claude Sonnet model for installation
- Verify that paths to your server's files are correct
- Ensure all required environment variables are set
- Check if another process is using the same port (for HTTP-based servers)
- Try removing and reinstalling the server (remove from both thecline_mcp_settings.jsonfile and the/Users/<username>/Documents/Cline/MCP/directory)
- Use a terminal and run the command with its arguments directly. This will allow you to see the same errors that Cline is seeing

- Contextual Tool Selection: Cline selects appropriate tools based on conversation context
- Reduced Friction: No need to manually specify which tool to use
- Organized Capabilities: Logically group related tools and servers
- Prioritization: Handle ambiguous cases with explicit priority ordering


LISTS:
- MCP Servers

- Open the MCP settings file:/Users/<username>/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json
- Delete the entire entry for your server from themcpServersobject
- Save the file
- Restart Cline

- Categories: Group related servers (e.g., "webInteraction", "mediaAndDesign")
- Servers: List server names in each category
- Triggers: Keywords that activate these servers
- Description: Human-readable category explanation


CODE EXAMPLES:
```
/Users/<username>/Documents/Cline/MCP/
```

```
/Users/<username>/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json
```

```
use_mcp_tool
```

```
access_mcp_resource
```

```
node --version
```

```
python --version
```

```
curl -LsSf https://astral.sh/uv/install.sh | sh
```

```
pip install uv
```

```
uv --version
```

```
/Users/<username>/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json
```

```
mcpServers
```

```
cline_mcp_settings.json
```

```
/Users/<username>/Documents/Cline/MCP/
```

```
.clinerules
```

```
{"mcpRules": {"webInteraction": {"servers": ["firecrawl-mcp-server","fetch-mcp"],"triggers": ["web", "scrape", "browse", "website"],"description": "Tools for web browsing and scraping"}}}
```

```
{"mcpRules": {"category1": {"servers": ["server-name-1","server-name-2"],"triggers": ["keyword1", "keyword2", "phrase1", "phrase2"],"description": "Description of what these tools do"},"category2": {"servers": ["server-name-3"],"triggers": ["keyword3", "keyword4", "phrase3"],"description": "Description of what these tools do"},"category3": {"servers": ["server-name-4","server-name-5"],"triggers": ["keyword5", "keyword6", "phrase4"],"description": "Description of what these tools do"}},"defaultBehavior": {"priorityOrder": ["category1","category2","category3"],"fallbackBehavior": "Ask user which tool would be most appropriate"}}
```

```
.clinerules
```



==================================================
PAGE: mcp-servers/mcp-server-from-github
URL: https://docs.cline.bot/mcp-servers/mcp-server-from-github
==================================================

TITLE: Adding MCP Servers from GitHub | Cline


H1 HEADINGS:
Adding MCP Servers from GitHub

H2 HEADINGS:
Finding an MCP Server
Building with Cline
Testing and Troubleshooting
Best Practices

CONTENT:
Last updated28 days ago

This guide provides a step-by-step walkthrough of how to use Cline to build an existing MCP server from a GitHub repository.

There are multiple places online to find MCP servers:

Cline can automatically add MCP servers to its list, which you can then edit.Cline can clone repositories directly from GitHub and build the servers for you.

GitHub:Two of the most common places to find MCP servers on GitHub include:

Online directories:Several websites list MCP servers including:

These directories allow users to sort the servers by various criteria such as downloads, date, stars, and use case. Each entry provides information such as features, tools, and configuration instructions.

PulseMCP:This website has a blog post discussing how AI could use MCP servers to make websites obsolete. PulseMCP also includes an FAQ section about MCP servers:

Initiate the Process:Provide Cline with the following information:

GitHub Repository URL:The URL of the server's repository.

README.md Contents:This is optional but helpful for Cline to understand the server's purpose and configuration. You can copy the README.md file from the GitHub repository.

Example Interaction with Cline:

Cline's Actions:Based on your instructions, Cline will perform the following:

Repository Cloning:Cline will clone the repository to your local machine, usually in the directory specified in your configuration.

Tweaking:You can guide Cline to modify the server‚Äôs configuration. For instance:

User:"This server requires an API key. Can you find where it should be added?"

Cline may automatically update thecline_mcp_settings.jsonfile or other relevant files based on your instructions.

Building the Server:Cline will run the appropriate build command for the server, which is commonlynpm run build.

Adding Server to Settings:Cline will add the server‚Äôs configuration to thecline_mcp_settings.jsonfile.

Test the Server:Once Cline finishes the build process, test the server to make sure it works as expected. Cline can assist you if you encounter any problems.

MCP Inspector:You can use the MCP Inspector to test the server‚Äôs connection and functionality.

Understand the Basics:While Cline simplifies the process, it‚Äôs beneficial to have a basic understanding of the server‚Äôs code, the MCP protocol (), and how to configure the server. This allows for more effective troubleshooting and customization.

Clear Instructions:Provide clear and specific instructions to Cline throughout the process.

Testing:Thoroughly test the server after installation and configuration to ensure it functions correctly.

Version Control:Use a version control system (like Git) to track changes to the server‚Äôs code.

Stay Updated:Keep your MCP servers updated to benefit from the latest features and security patches.


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Finding an MCP Server
- Building with Cline
- Testing and Troubleshooting
- Best Practices

- Cline can automatically add MCP servers to its list, which you can then edit.Cline can clone repositories directly from GitHub and build the servers for you.
- GitHub:Two of the most common places to find MCP servers on GitHub include:
- Online directories:Several websites list MCP servers including:These directories allow users to sort the servers by various criteria such as downloads, date, stars, and use case. Each entry provides information such as features, tools, and configuration instructions.
- PulseMCP:This website has a blog post discussing how AI could use MCP servers to make websites obsolete. PulseMCP also includes an FAQ section about MCP servers:

- 
- 

- 
- 
- 

- GitHub Repository URL:The URL of the server's repository.
- README.md Contents:This is optional but helpful for Cline to understand the server's purpose and configuration. You can copy the README.md file from the GitHub repository.

- Repository Cloning:Cline will clone the repository to your local machine, usually in the directory specified in your configuration.
- Tweaking:You can guide Cline to modify the server‚Äôs configuration. For instance:User:"This server requires an API key. Can you find where it should be added?"Cline may automatically update thecline_mcp_settings.jsonfile or other relevant files based on your instructions.
- Building the Server:Cline will run the appropriate build command for the server, which is commonlynpm run build.
- Adding Server to Settings:Cline will add the server‚Äôs configuration to thecline_mcp_settings.jsonfile.

- User:"This server requires an API key. Can you find where it should be added?"
- Cline may automatically update thecline_mcp_settings.jsonfile or other relevant files based on your instructions.

- Understand the Basics:While Cline simplifies the process, it‚Äôs beneficial to have a basic understanding of the server‚Äôs code, the MCP protocol (), and how to configure the server. This allows for more effective troubleshooting and customization.
- Clear Instructions:Provide clear and specific instructions to Cline throughout the process.
- Testing:Thoroughly test the server after installation and configuration to ensure it functions correctly.
- Version Control:Use a version control system (like Git) to track changes to the server‚Äôs code.
- Stay Updated:Keep your MCP servers updated to benefit from the latest features and security patches.


LISTS:
- MCP Servers

- Initiate the Process:Provide Cline with the following information:GitHub Repository URL:The URL of the server's repository.README.md Contents:This is optional but helpful for Cline to understand the server's purpose and configuration. You can copy the README.md file from the GitHub repository.
- Example Interaction with Cline:CopyUser: "Cline, I want to add the MCP server for Brave browser control. Here's the GitHub link: @https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search Can you add it?"Cline: "OK. Cloning the repository to the MCP directory. It needs to be built because it has a 'package.json' file. Should I run 'npm run build'?"User: "Yes, build it."Cline: "Build complete. This server needs a browser path. Where's your Brave browser executable?"User: "It's in '/Applications/Brave Browser.app/Contents/MacOS/Brave Browser'."Cline: "OK. I've updated the server config with that path and added it to 'cline_mcp_settings.json'. Anything else?"User: "No, that's all. Let's test it."Cline: "Great! Starting the MCP Inspector to test the server connection. After that, we can try controlling the browser from Cline."
- Cline's Actions:Based on your instructions, Cline will perform the following:Repository Cloning:Cline will clone the repository to your local machine, usually in the directory specified in your configuration.Tweaking:You can guide Cline to modify the server‚Äôs configuration. For instance:User:"This server requires an API key. Can you find where it should be added?"Cline may automatically update thecline_mcp_settings.jsonfile or other relevant files based on your instructions.Building the Server:Cline will run the appropriate build command for the server, which is commonlynpm run build.Adding Server to Settings:Cline will add the server‚Äôs configuration to thecline_mcp_settings.jsonfile.

- Test the Server:Once Cline finishes the build process, test the server to make sure it works as expected. Cline can assist you if you encounter any problems.
- MCP Inspector:You can use the MCP Inspector to test the server‚Äôs connection and functionality.


CODE EXAMPLES:
```
User: "Cline, I want to add the MCP server for Brave browser control. Here's the GitHub link: @https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search Can you add it?"Cline: "OK. Cloning the repository to the MCP directory. It needs to be built because it has a 'package.json' file. Should I run 'npm run build'?"User: "Yes, build it."Cline: "Build complete. This server needs a browser path. Where's your Brave browser executable?"User: "It's in '/Applications/Brave Browser.app/Contents/MacOS/Brave Browser'."Cline: "OK. I've updated the server config with that path and added it to 'cline_mcp_settings.json'. Anything else?"User: "No, that's all. Let's test it."Cline: "Great! Starting the MCP Inspector to test the server connection. After that, we can try controlling the browser from Cline."
```

```
cline_mcp_settings.json
```

```
npm run build
```

```
cline_mcp_settings.json
```



==================================================
PAGE: mcp-servers/configuring-mcp-servers
URL: https://docs.cline.bot/mcp-servers/configuring-mcp-servers
==================================================

TITLE: Configuring MCP Servers | Cline


H1 HEADINGS:
Configuring MCP Servers

H3 HEADINGS:
Global MCP Server Inclusion Mode
Managing Individual MCP Servers‚Äã
Editing MCP Settings Files‚Äã
Understanding Transport Types‚Äã
STDIO Transport‚Äã
SSE Transport‚Äã
Using MCP Tools in Your Workflow‚Äã
Troubleshooting MCP Servers‚Äã

H4 HEADINGS:
Deleting a Server‚Äã
Restarting a Server‚Äã
Enabling or Disabling a Server‚Äã
Network Timeout‚Äã

CONTENT:
Last updated9 days ago

Utilizing MCP servers will increase your token useage. Cline offers the ability to restrict or disable MCP server functionality as desired.

Click the "MCP Servers" icon in the top navigation bar of the Cline extension.

Select the "Installed" tab, and then Click the "Advanced MCP Settings" link at the bottom of that pane.

Cline will open a new settings window. findCline>Mcp:Modeand make your selection from the dropdown menu.

Each MCP server has its own configuration panel where you can modify settings, manage tools, and control its operation. To access these settings:

Click the "MCP Servers" icon in the top navigation bar of the Cline extension.

Locate the MCP server you want to manage in the list, and open it by clicking on its name.

Click the Trash icon next to the MCP server you would like to delete, or the red Delete Server button at the bottom of the MCP server config box.

NOTE: There is no delete confirmation dialog box

Click the Restart button next to the MCP server you would like to restart, or the gray Restart Server button at the bottom of the MCP server config box.

Click the toggle switch next to the MCP server to enable/disable servers individually.

To set the maximum time to wait for a response after a tool call to the MCP server:

Click theNetwork Timeoutdropdown at the bottom of the individual MCP server's config box and change the time. Default is 1 minute but it can be set between 30 seconds and 1 hour.

Settings for all installed MCP servers are located in thecline_mcp_settings.jsonfile :

Click the MCP Servers icon at the top navigation bar of the Cline pane.

Select the "Installed" tab.

Click the "Configure MCP Servers" button at the bottom of the pane.

The file usees a JSON format with amcpServersobject containing named server configurations:

Example of MCP Server config in Cline (STDIO Transport)

MCP supports two transport types for server communication:

Used for local servers running on your machine:

Communicates via standard input/output streams

Lower latency (no network overhead)

Better security (no network exposure)

Simpler setup (no HTTP server needed)

Runs as a child process on your machine

For more in-depth information about how STDIO transport works, seeMCP Transport Mechanisms.

STDIO configuration example:

Used for remote servers accessed over HTTP/HTTPS:

Communicates via Server-Sent Events protocol

Can be hosted on a different machine

Supports multiple client connections

Requires network access

Allows centralized deployment and management

For more in-depth information about how SSE transport works, seeMCP Transport Mechanisms.

SSE configuration example:

After configuring an MCP server, Cline will automatically detect available tools and resources. To use them:

Type your request in Cline's conversation window

Cline will identify when an MCP tool can help with your task

Approve the tool use when prompted (or use auto-approval)

Example: "Analyze the performance of my API" might use an MCP tool that tests API endpoints.

Common issues and solutions:

Server Not Responding:Check if the server process is running and verify network connectivity

Permission Errors:Ensure proper API keys and credentials are configured in yourmcp_settings.jsonfile.

Tool Not Available:Confirm the server is properly implementing the tool and it's not disabled in settings

Slow Performance:Try adjusting the network timeout value for the specific MCP server

Edit this page


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Global MCP Server Inclusion Mode
- Managing Individual MCP Servers‚Äã
- Editing MCP Settings Files‚Äã
- Understanding Transport Types‚Äã
- STDIO Transport‚Äã
- SSE Transport‚Äã
- Using MCP Tools in Your Workflow‚Äã
- Troubleshooting MCP Servers‚Äã

- Communicates via standard input/output streams
- Lower latency (no network overhead)
- Better security (no network exposure)
- Simpler setup (no HTTP server needed)
- Runs as a child process on your machine

- Communicates via Server-Sent Events protocol
- Can be hosted on a different machine
- Supports multiple client connections
- Requires network access
- Allows centralized deployment and management

- Server Not Responding:Check if the server process is running and verify network connectivity
- Permission Errors:Ensure proper API keys and credentials are configured in yourmcp_settings.jsonfile.
- Tool Not Available:Confirm the server is properly implementing the tool and it's not disabled in settings
- Slow Performance:Try adjusting the network timeout value for the specific MCP server


LISTS:
- MCP Servers

- Click the "MCP Servers" icon in the top navigation bar of the Cline extension.
- Select the "Installed" tab, and then Click the "Advanced MCP Settings" link at the bottom of that pane.
- Cline will open a new settings window. findCline>Mcp:Modeand make your selection from the dropdown menu.

- Click the "MCP Servers" icon in the top navigation bar of the Cline extension.
- Locate the MCP server you want to manage in the list, and open it by clicking on its name.

- Click the Trash icon next to the MCP server you would like to delete, or the red Delete Server button at the bottom of the MCP server config box.

- Click the Restart button next to the MCP server you would like to restart, or the gray Restart Server button at the bottom of the MCP server config box.

- Click the toggle switch next to the MCP server to enable/disable servers individually.

- Click theNetwork Timeoutdropdown at the bottom of the individual MCP server's config box and change the time. Default is 1 minute but it can be set between 30 seconds and 1 hour.

- Click the MCP Servers icon at the top navigation bar of the Cline pane.
- Select the "Installed" tab.
- Click the "Configure MCP Servers" button at the bottom of the pane.

- Type your request in Cline's conversation window
- Cline will identify when an MCP tool can help with your task
- Approve the tool use when prompted (or use auto-approval)


CODE EXAMPLES:
```
Cline>Mcp:Mode
```

```
Network Timeout
```

```
cline_mcp_settings.json
```

```
mcpServers
```

```
{"mcpServers": {"server1": {"command": "python","args": ["/path/to/server.py"],"env": {"API_KEY": "your_api_key"},"alwaysAllow": ["tool1", "tool2"],"disabled": false}}}
```

```
{"mcpServers": {"local-server": {"command": "node","args": ["/path/to/server.js"],"env": {"API_KEY": "your_api_key"},"alwaysAllow": ["tool1", "tool2"],"disabled": false}}}
```

```
{"mcpServers": {"remote-server": {"url": "https://your-server-url.com/mcp","headers": {"Authorization": "Bearer your-token"},"alwaysAllow": ["tool3"],"disabled": false}}}
```

```
mcp_settings.json
```



==================================================
PAGE: mcp-servers/connecting-to-a-remote-server
URL: https://docs.cline.bot/mcp-servers/connecting-to-a-remote-server
==================================================

TITLE: Connecting to a Remote Server | Cline


H1 HEADINGS:
Connecting to a Remote Server

H2 HEADINGS:
Adding and Managing Remote MCP Servers

H3 HEADINGS:
Accessing the MCP Servers Interface
Understanding the MCP Servers Interface
Adding a Remote MCP Server
Remote Server Discovery
Managing Installed MCP Servers
Troubleshooting Connection Issues
Advanced Configuration
Using MCP Server Tools

H4 HEADINGS:
Composio MCP Integration
Connecting via Smithery
View Server Status
Configure Server Settings
Enable/Disable Servers

CONTENT:
The Model Context Protocol (MCP) allows Cline to communicate with external servers that provide additional tools and resources to extend its capabilities. This guide explains how to add and connect to remote MCP servers through the MCP Servers interface.

To access the MCP Servers interface in Cline:

Click on the Cline icon in the VSCode sidebar

Open the menu (‚ãÆ) in the top right corner of the Cline panel

Select "MCP Servers" from the dropdown menu

The MCP Servers interface is divided into three main tabs:

Marketplace: Discover and install pre-configured MCP servers (if enabled)

Remote Servers: Connect to existing MCP servers via URL endpoints

Installed: Manage your connected MCP servers

The "Remote Servers" tab allows you to connect to any MCP server that's accessible via a URL endpoint:

Click on the "Remote Servers" tab in the MCP Servers interface

Fill in the required information:

Server Name: Provide a unique, descriptive name for the server

Server URL: Enter the complete URL endpoint of the MCP server (e.g.,https://example.com/mcp-sse)

Click "Add Server" to initiate the connection

Cline will attempt to connect to the server and display the connection status

Note: When connecting to a remote server, ensure you trust the source, as MCP servers can execute code in your environment.

If you're looking for MCP servers to connect to, several third-party marketplaces provide directories of available servers with various capabilities.

Warning: The following third-party marketplaces are listed for informational purposes only. Cline does not endorse, verify, or take responsibility for any servers listed on these marketplaces. These servers are cloud-hosted services that process your requests and may have access to data you share with them. Always review privacy policies and terms of use before connecting to third-party services.

Smithery is a third-party MCP server marketplace that allows users to discover and connect to a variety of Model Context Protocol (MCP) servers. If you're using an MCP-compatible client (such as Cursor, Claude Desktop, or Cline), you can browse available servers and integrate them directly into your workflow.

Please note: Smithery is maintained independently and is not affiliated with our project. Use at your own discretion.

Once added, your MCP servers appear in the "Installed" tab where you can:

Each server displays its current status:

Green dot: Connected and ready to use

Yellow dot: In the process of connecting

Red dot: Disconnected or experiencing errors

Click on a server to expand its settings panel:

Tools & Resources:

View all available tools and resources from the server

Configure auto-approval settings for tools (if enabled)

Request Timeout:

Set how long Cline should wait for server responses

Options range from 30 seconds to 1 hour

Server Management:

Restart Server: Reconnect if the server becomes unresponsive

Delete Server: Remove the server from your configuration

Toggle the switch next to each server to enable or disable it:

Enabled: Cline can use the server's tools and resources

Disabled: The server remains in your configuration but is not active

If a server fails to connect:

An error message will be displayed with details about the failure

Check that the server URL is correct and the server is running

Use the "Restart Server" button to attempt reconnection

If problems persist, you can delete the server and try adding it again

For advanced users, Cline stores MCP server configurations in a JSON file that can be modified:

In the "Installed" tab, click "Configure MCP Servers" to access the settings file

The configuration for each server follows this format:

Key configuration options:

url: The endpoint URL (for remote servers)

disabled: Whether the server is currently enabled (true/false)

autoApprove: List of tool names that don't require confirmation

timeout: Maximum time in seconds to wait for server responses

For additional MCP settings, click the "Advanced MCP Settings" link to access VSCode settings.

Once connected, Cline can use the tools and resources provided by the MCP server. When Cline suggests using an MCP tool:

A tool approval prompt will appear (unless auto-approved)

Review the tool details and parameters before approving

The tool will execute and return results to Cline

Last updated9 days ago

provides access to a wide range of third-party servers that support the Model Context Protocol (MCP). These servers expose APIs for services like GitHub, Notion, Slack, and others. Each server includes configuration instructions and built-in authentication support (e.g. OAuth or API keys). To connect, locate the desired service in the marketplace and follow the integration steps provided there.

To explore available options, visit the Smithery marketplace:


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Adding and Managing Remote MCP Servers
- Accessing the MCP Servers Interface
- Understanding the MCP Servers Interface
- Adding a Remote MCP Server
- Remote Server Discovery
- Managing Installed MCP Servers
- Troubleshooting Connection Issues
- Advanced Configuration
- Using MCP Server Tools

- Marketplace: Discover and install pre-configured MCP servers (if enabled)
- Remote Servers: Connect to existing MCP servers via URL endpoints
- Installed: Manage your connected MCP servers

- Server Name: Provide a unique, descriptive name for the server
- Server URL: Enter the complete URL endpoint of the MCP server (e.g.,https://example.com/mcp-sse)

- Green dot: Connected and ready to use
- Yellow dot: In the process of connecting
- Red dot: Disconnected or experiencing errors

- View all available tools and resources from the server
- Configure auto-approval settings for tools (if enabled)

- Set how long Cline should wait for server responses
- Options range from 30 seconds to 1 hour

- Restart Server: Reconnect if the server becomes unresponsive
- Delete Server: Remove the server from your configuration

- Enabled: Cline can use the server's tools and resources
- Disabled: The server remains in your configuration but is not active

- url: The endpoint URL (for remote servers)
- disabled: Whether the server is currently enabled (true/false)
- autoApprove: List of tool names that don't require confirmation
- timeout: Maximum time in seconds to wait for server responses


LISTS:
- MCP Servers

- Click on the Cline icon in the VSCode sidebar
- Open the menu (‚ãÆ) in the top right corner of the Cline panel
- Select "MCP Servers" from the dropdown menu

- Click on the "Remote Servers" tab in the MCP Servers interface
- Fill in the required information:Server Name: Provide a unique, descriptive name for the serverServer URL: Enter the complete URL endpoint of the MCP server (e.g.,https://example.com/mcp-sse)
- Click "Add Server" to initiate the connection
- Cline will attempt to connect to the server and display the connection status

- Tools & Resources:View all available tools and resources from the serverConfigure auto-approval settings for tools (if enabled)
- Request Timeout:Set how long Cline should wait for server responsesOptions range from 30 seconds to 1 hour
- Server Management:Restart Server: Reconnect if the server becomes unresponsiveDelete Server: Remove the server from your configuration

- An error message will be displayed with details about the failure
- Check that the server URL is correct and the server is running
- Use the "Restart Server" button to attempt reconnection
- If problems persist, you can delete the server and try adding it again

- In the "Installed" tab, click "Configure MCP Servers" to access the settings file
- The configuration for each server follows this format:

- A tool approval prompt will appear (unless auto-approved)
- Review the tool details and parameters before approving
- The tool will execute and return results to Cline


CODE EXAMPLES:
```
https://example.com/mcp-sse
```

```
{"mcpServers": {"exampleServer": {"url": "https://example.com/mcp-sse","disabled": false,"autoApprove": ["tool1", "tool2"],"timeout": 30}}}
```



==================================================
PAGE: mcp-servers/mcp-transport-mechanisms
URL: https://docs.cline.bot/mcp-servers/mcp-transport-mechanisms
==================================================

TITLE: MCP Transport Mechanisms | Cline


H1 HEADINGS:
MCP Transport Mechanisms

H3 HEADINGS:
STDIO Transport
SSE Transport
Local vs. Hosted: Deployment Aspects
Choosing Between STDIO and SSE
Configuring Transports in Cline

H4 HEADINGS:
How STDIO Transport Works
STDIO Characteristics
When to Use STDIO
STDIO Implementation Example
How SSE Transport Works
SSE Characteristics
When to Use SSE
SSE Implementation Example
STDIO: Local Deployment Model
SSE: Hosted Deployment Model
Hybrid Approaches

CONTENT:
Last updated10 days ago

Model Context Protocol (MCP) supports two primary transport mechanisms for communication between Cline and MCP servers: Standard Input/Output (STDIO) and Server-Sent Events (SSE). Each has distinct characteristics, advantages, and use cases.

STDIO transport runs locally on your machine and communicates via standard input/output streams.

The client (Cline) spawns an MCP server as a child process

Communication happens through process streams: client writes to server's STDIN, server responds to STDOUT

Each message is delimited by a newline character

Messages are formatted as JSON-RPC 2.0

Locality: Runs on the same machine as Cline

Performance: Very low latency and overhead (no network stack involved)

Simplicity: Direct process communication without network configuration

Relationship: One-to-one relationship between client and server

Security: Inherently more secure as no network exposure

STDIO transport is ideal for:

Local integrations and tools running on the same machine

Security-sensitive operations

Low-latency requirements

Single-client scenarios (one Cline instance per server)

Command-line tools or IDE extensions

Server-Sent Events (SSE) transport runs on a remote server and communicates over HTTP/HTTPS.

The client (Cline) connects to the server's SSE endpoint via HTTP GET request

This establishes a persistent connection where the server can push events to the client

For client-to-server communication, the client makes HTTP POST requests to a separate endpoint

Communication happens over two channels:

Event Stream (GET): Server-to-client updates

Message Endpoint (POST): Client-to-server requests

Remote Access: Can be hosted on a different machine from your Cline instance

Scalability: Can handle multiple client connections concurrently

Protocol: Works over standard HTTP (no special protocols needed)

Persistence: Maintains a persistent connection for server-to-client messages

Authentication: Can use standard HTTP authentication mechanisms

SSE transport is better for:

Remote access across networks

Multi-client scenarios

Public services

Centralized tools that many users need to access

Integration with web services

The choice between STDIO and SSE transports directly impacts how you'll deploy and manage your MCP servers.

STDIO servers run locally on the same machine as Cline, which has several important implications:

Installation: The server executable must be installed on each user's machine

Distribution: You need to provide installation packages for different operating systems

Updates: Each instance must be updated separately

Resources: Uses the local machine's CPU, memory, and disk

Access Control: Relies on the local machine's filesystem permissions

Integration: Easy integration with local system resources (files, processes)

Execution: Starts and stops with Cline (child process lifecycle)

Dependencies: Any dependencies must be installed on the user's machine

A local file search tool using STDIO would:

Run on the user's machine

Have direct access to the local filesystem

Start when needed by Cline

Not require network configuration

Need to be installed alongside Cline or via a package manager

SSE servers can be deployed to remote servers and accessed over the network:

Installation: Installed once on a server, accessed by many users

Distribution: Single deployment serves multiple clients

Updates: Centralized updates affect all users immediately

Resources: Uses server resources, not local machine resources

Access Control: Managed through authentication and authorization systems

Integration: More complex integration with user-specific resources

Execution: Runs as an independent service (often continuously)

Dependencies: Managed on the server, not on user machines

A database query tool using SSE would:

Run on a central server

Connect to databases with server-side credentials

Be continuously available for multiple users

Require proper network security configuration

Be deployed using container or cloud technologies

Some scenarios benefit from a hybrid approach:

STDIO with Network Access: A local STDIO server that acts as a proxy to remote services

SSE with Local Commands: A remote SSE server that can trigger operations on the client machine through callbacks

Gateway Pattern: STDIO servers for local operations that connect to SSE servers for specialized functions

Location

Local machine only

Local or remote

Clients

Single client

Multiple clients

Performance

Lower latency

Higher latency (network overhead)

Setup Complexity

Simpler

More complex (requires HTTP server)

Security

Inherently secure

Requires explicit security measures

Network Access

Not needed

Required

Scalability

Limited to local machine

Can distribute across network

Deployment

Per-user installation

Centralized installation

Updates

Distributed updates

Centralized updates

Resource Usage

Uses client resources

Uses server resources

Dependencies

Client-side dependencies

Server-side dependencies

Practical Example

Practical Example

For detailed information on configuring STDIO and SSE transports in Cline, including examples,.


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- STDIO Transport‚Äã
- SSE Transport‚Äã
- Local vs. Hosted: Deployment Aspects‚Äã
- Choosing Between STDIO and SSE‚Äã
- Configuring Transports in Cline‚Äã

- Locality: Runs on the same machine as Cline
- Performance: Very low latency and overhead (no network stack involved)
- Simplicity: Direct process communication without network configuration
- Relationship: One-to-one relationship between client and server
- Security: Inherently more secure as no network exposure

- Local integrations and tools running on the same machine
- Security-sensitive operations
- Low-latency requirements
- Single-client scenarios (one Cline instance per server)
- Command-line tools or IDE extensions

- Event Stream (GET): Server-to-client updates
- Message Endpoint (POST): Client-to-server requests

- Remote Access: Can be hosted on a different machine from your Cline instance
- Scalability: Can handle multiple client connections concurrently
- Protocol: Works over standard HTTP (no special protocols needed)
- Persistence: Maintains a persistent connection for server-to-client messages
- Authentication: Can use standard HTTP authentication mechanisms

- Remote access across networks
- Multi-client scenarios
- Public services
- Centralized tools that many users need to access
- Integration with web services

- Installation: The server executable must be installed on each user's machine
- Distribution: You need to provide installation packages for different operating systems
- Updates: Each instance must be updated separately
- Resources: Uses the local machine's CPU, memory, and disk
- Access Control: Relies on the local machine's filesystem permissions
- Integration: Easy integration with local system resources (files, processes)
- Execution: Starts and stops with Cline (child process lifecycle)
- Dependencies: Any dependencies must be installed on the user's machine

- Run on the user's machine
- Have direct access to the local filesystem
- Start when needed by Cline
- Not require network configuration
- Need to be installed alongside Cline or via a package manager

- Installation: Installed once on a server, accessed by many users
- Distribution: Single deployment serves multiple clients
- Updates: Centralized updates affect all users immediately
- Resources: Uses server resources, not local machine resources
- Access Control: Managed through authentication and authorization systems
- Integration: More complex integration with user-specific resources
- Execution: Runs as an independent service (often continuously)
- Dependencies: Managed on the server, not on user machines

- Run on a central server
- Connect to databases with server-side credentials
- Be continuously available for multiple users
- Require proper network security configuration
- Be deployed using container or cloud technologies


LISTS:
- MCP Servers

- The client (Cline) spawns an MCP server as a child process
- Communication happens through process streams: client writes to server's STDIN, server responds to STDOUT
- Each message is delimited by a newline character
- Messages are formatted as JSON-RPC 2.0

- The client (Cline) connects to the server's SSE endpoint via HTTP GET request
- This establishes a persistent connection where the server can push events to the client
- For client-to-server communication, the client makes HTTP POST requests to a separate endpoint
- Communication happens over two channels:Event Stream (GET): Server-to-client updatesMessage Endpoint (POST): Client-to-server requests

- STDIO with Network Access: A local STDIO server that acts as a proxy to remote services
- SSE with Local Commands: A remote SSE server that can trigger operations on the client machine through callbacks
- Gateway Pattern: STDIO servers for local operations that connect to SSE servers for specialized functions


CODE EXAMPLES:
```
Client                    Server|                         ||<---- JSON message ----->| (via STDIN)|                         | (processes request)|<---- JSON message ------| (via STDOUT)|                         |
```

```
import { Server } from '@modelcontextprotocol/sdk/server/index.js';import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';const server = new Server({name: 'local-server', version: '1.0.0'});// Register tools...// Use STDIO transportconst transport = new StdioServerTransport(server);transport.listen();
```

```
Client                             Server|                                  ||---- HTTP GET /events ----------->| (establish SSE connection)|<---- SSE event stream -----------| (persistent connection)|                                  ||---- HTTP POST /message --------->| (client request)|<---- SSE event with response ----| (server response)|                                  |
```

```
import { Server } from '@modelcontextprotocol/sdk/server/index.js';import { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';import express from 'express';const app = express();const server = new Server({name: 'remote-server', version: '1.0.0'});// Register tools...// Use SSE transportconst transport = new SSEServerTransport(server);app.use('/mcp', transport.requestHandler());app.listen(3000, () => {console.log('MCP server listening on port 3000');});
```



==================================================
PAGE: mcp-servers/mcp-server-from-scratch
URL: https://docs.cline.bot/mcp-servers/mcp-server-from-scratch
==================================================

TITLE: MCP Server Development Protocol | Cline


H1 HEADINGS:
MCP Server Development Protocol

H3 HEADINGS:
What Are MCP Servers?
The Development Protocol
Getting Started
Understanding the Two Modes
Case Study: AlphaAdvantage Stock Analysis Server
Core Implementation Best Practices
MCP Resources
Common Challenges and Solutions
Additional Resources

H4 HEADINGS:
Using.clinerulesFiles
1. Create a.clinerulesfile (üö® IMPORTANT)
2. Start a Chat with a Clear Description
3. Work Through the Protocol
4. Provide API Documentation Early
PLAN MODE
ACT MODE
Planning Phase
Implementation
Testing Phase
Challenges and Solutions
Lessons Learned
Comprehensive Logging
Strong Typing
Intelligent Caching
Graceful Error Handling
Adding Resources to Your MCP Server
API Authentication Complexities
Missing or Limited API Features
API Rate Limiting

CONTENT:
This protocol is designed to streamline the development process of building MCP servers with Cline.

Last updated14 days ago

üöÄBuild and share your MCP servers with the world.Once you've created a great MCP server, submit it to theto make it discoverable and one-click installable by thousands of developers.

Model Context Protocol (MCP) servers extend AI assistants like Cline by giving them the ability to:

Access external APIs and services

Retrieve real-time data

Control applications and local systems

Perform actions beyond what text prompts alone can achieve

Without MCP, AI assistants are powerful but isolated. With MCP, they gain the ability to interact with virtually any digital system.

The heart of effective MCP server development is following a structured protocol. This protocol is implemented through a.clinerulesfile that lives at therootof your MCP working directory (/Users/your-name/Documents/Cline/MCP).

A.clinerulesfile is a special configuration that Cline reads automatically when working in the directory where it's placed. These files:

Configure Cline's behavior and enforce best practices

Switch Cline into a specialized MCP development mode

Provide a step-by-step protocol for building servers

Implement safety measures like preventing premature completion

Guide you through planning, implementation, and testing phases

Here's the complete MCP Server Development Protocol that should be placed in your.clinerulesfile:

When this.clinerulesfile is present in your working directory, Cline will:

Start inPLAN MODEto design your server before implementation

Enforce proper implementation patterns inACT MODE

Require testing of all tools before allowing completion

Guide you through the entire development lifecycle

Creating an MCP server requires just a few simple steps to get started:

First, add a.clinerulesfile to the root of your MCP working directory using the protocol above. This file configures Cline to use the MCP development protocol when working in this folder.

Begin your Cline chat by clearly describing what you want to build. Be specific about:

The purpose of your MCP server

Which API or service you want to integrate with

Any specific tools or features you need

For example:

Cline will automatically start in PLAN MODE, guiding you through the planning process:

Discussing the problem scope

Reviewing API documentation

Planning authentication methods

Designing tool interfaces

When ready, switch to ACT MODE using the toggle at the bottom of the chat to begin implementation.

One of the most effective ways to help Cline build your MCP server is to share official API documentation right at the start:

Providing comprehensive API details (endpoints, authentication, data structures) significantly improves Cline's ability to implement an effective MCP server.

In this collaborative phase, you work with Cline to design your MCP server:

Define the problem scope

Choose appropriate APIs

Plan authentication methods

Design the tool interfaces

Determine data formats

Once planning is complete, Cline helps implement the server:

Set up the project structure

Write the implementation code

Configure settings

Test each component thoroughly

Finalize documentation

Let's walk through the development process of our AlphaAdvantage MCP server, which provides stock data analysis and reporting capabilities.

During the planning phase, we:

Defined the problem: Users need access to financial data, stock analysis, and market insights directly through their AI assistant

Selected the API: AlphaAdvantage API for financial market data

Standard API key authentication

Rate limits of 5 requests per minute (free tier)

Various endpoints for different financial data types

Designed the tools needed:

Stock overview information (current price, company details)

Technical analysis with indicators (RSI, MACD, etc.)

Fundamental analysis (financial statements, ratios)

Earnings report data

News and sentiment analysis

Planned data formatting:

Clean, well-formatted markdown output

Tables for structured data

Visual indicators (‚Üë/‚Üì) for trends

Proper formatting of financial numbers

We began by bootstrapping the project:

Next, we structured our project with:

API Client Implementation

The API client implementation included:

Rate limiting: Enforcing the 5 requests per minute limit

Caching: Reducing API calls with strategic caching

Error handling: Robust error detection and reporting

Typed interfaces: Clear TypeScript types for all data

Key implementation details:

Markdown Formatting

We implemented formatters to display financial data beautifully:

Tool Implementation

We defined five tools with clear interfaces:

Each tool's handler included:

Input validation

API client calls with error handling

Markdown formatting of responses

Comprehensive logging

This critical phase involved systematically testing each tool:

First, we configured the MCP server in the settings:

Then we tested each tool individually:

get_stock_overview: Retrieved AAPL stock overview information

get_technical_analysis: Obtained price action and RSI data

get_earnings_report: Retrieved MSFT earnings history and formatted report

During development, we encountered several challenges:

API Rate Limiting:

Challenge: Free tier limited to 5 calls per minute

Solution: Implemented queuing, enforced rate limits, and added comprehensive caching

Data Formatting:

Challenge: Raw API data not user-friendly

Solution: Created formatting utilities for consistent display of financial data

Timeout Issues:

Challenge: Complex tools making multiple API calls could timeout

Solution: Suggested breaking complex tools into smaller pieces, optimizing caching

Our AlphaAdvantage implementation taught us several key lessons:

Plan for API Limits: Understand and design around API rate limits from the beginning

Cache Strategically: Identify high-value caching opportunities to improve performance

Format for Readability: Invest in good data formatting for improved user experience

Test Every Path: Test all tools individually before completion

Handle API Complexity: For APIs requiring multiple calls, design tools with simpler scopes

Effective logging is essential for debugging MCP servers:

Type definitions prevent errors and improve maintainability:

Reduce API calls and improve performance:

Implement robust error handling that maintains a good user experience:

Resources let your MCP servers expose data to Cline without executing code. They're perfect for providing context like files, API responses, or database records that Cline can reference during conversations.

Define the resourcesyour server will expose:

Implement read handlersto deliver the content:

Challenge: APIs often have different authentication methods.

Solution:

For API keys, use environment variables in the MCP configuration

For OAuth, create a separate script to obtain refresh tokens

Store sensitive tokens securely

Challenge: APIs may not provide all the functionality you need.

Solution:

Implement fallbacks using available endpoints

Create simulated functionality where necessary

Transform API data to match your needs

Challenge: Most APIs have rate limits that can cause failures.

Solution:

Implement proper rate limiting

Add intelligent caching

Provide graceful degradation

Add transparent errors about rate limits

Resources make your MCP servers more context-aware, allowing Cline to access specific information without requiring you to copy/paste. For more information, refer to the.


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- What Are MCP Servers?
- The Development Protocol
- Getting Started
- Understanding the Two Modes
- Case Study: AlphaAdvantage Stock Analysis Server
- Core Implementation Best Practices
- MCP Resources
- Common Challenges and Solutions
- Additional Resources

- Access external APIs and services
- Retrieve real-time data
- Control applications and local systems
- Perform actions beyond what text prompts alone can achieve

- Configure Cline's behavior and enforce best practices
- Switch Cline into a specialized MCP development mode
- Provide a step-by-step protocol for building servers
- Implement safety measures like preventing premature completion
- Guide you through planning, implementation, and testing phases

- The purpose of your MCP server
- Which API or service you want to integrate with
- Any specific tools or features you need

- Discussing the problem scope
- Reviewing API documentation
- Planning authentication methods
- Designing tool interfaces

- Define the problem scope
- Choose appropriate APIs
- Plan authentication methods
- Design the tool interfaces
- Determine data formats

- Set up the project structure
- Write the implementation code
- Configure settings
- Test each component thoroughly
- Finalize documentation

- Standard API key authentication
- Rate limits of 5 requests per minute (free tier)
- Various endpoints for different financial data types

- Stock overview information (current price, company details)
- Technical analysis with indicators (RSI, MACD, etc.)
- Fundamental analysis (financial statements, ratios)
- Earnings report data
- News and sentiment analysis

- Clean, well-formatted markdown output
- Tables for structured data
- Visual indicators (‚Üë/‚Üì) for trends
- Proper formatting of financial numbers

- Rate limiting: Enforcing the 5 requests per minute limit
- Caching: Reducing API calls with strategic caching
- Error handling: Robust error detection and reporting
- Typed interfaces: Clear TypeScript types for all data

- Input validation
- API client calls with error handling
- Markdown formatting of responses
- Comprehensive logging

- get_stock_overview: Retrieved AAPL stock overview informationCopy# AAPL (Apple Inc) - $241.84 ‚Üë+1.91%**Sector:** TECHNOLOGY**Industry:** ELECTRONIC COMPUTERS**Market Cap:** 3.63T**P/E Ratio:** 38.26...
- get_technical_analysis: Obtained price action and RSI dataCopy# Technical Analysis: AAPL## Daily Price ActionCurrent Price: $241.84 (‚Üë$4.54, +1.91%)### Recent Daily Prices| Date | Open | High | Low | Close | Volume ||------|------|------|-----|-------|--------|| 2025-02-28 | $236.95 | $242.09 | $230.20 | $241.84 | 56.83M |...
- get_earnings_report: Retrieved MSFT earnings history and formatted reportCopy# Earnings Report: MSFT (Microsoft Corporation)**Sector:** TECHNOLOGY**Industry:** SERVICES-PREPACKAGED SOFTWARE**Current EPS:** $12.43## Recent Quarterly Earnings| Quarter | Date | EPS Estimate | EPS Actual | Surprise % ||---------|------|-------------|------------|------------|| 2024-12-31 | 2025-01-29 | $3.11 | $3.23 | ‚Üë4.01% |...

- Challenge: Free tier limited to 5 calls per minute
- Solution: Implemented queuing, enforced rate limits, and added comprehensive caching

- Challenge: Raw API data not user-friendly
- Solution: Created formatting utilities for consistent display of financial data

- Challenge: Complex tools making multiple API calls could timeout
- Solution: Suggested breaking complex tools into smaller pieces, optimizing caching

- For API keys, use environment variables in the MCP configuration
- For OAuth, create a separate script to obtain refresh tokens
- Store sensitive tokens securely

- Implement fallbacks using available endpoints
- Create simulated functionality where necessary
- Transform API data to match your needs

- Implement proper rate limiting
- Add intelligent caching
- Provide graceful degradation
- Add transparent errors about rate limits

- 
- 
- 


LISTS:
- MCP Servers

- Start inPLAN MODEto design your server before implementation
- Enforce proper implementation patterns inACT MODE
- Require testing of all tools before allowing completion
- Guide you through the entire development lifecycle

- Defined the problem: Users need access to financial data, stock analysis, and market insights directly through their AI assistant
- Selected the API: AlphaAdvantage API for financial market dataStandard API key authenticationRate limits of 5 requests per minute (free tier)Various endpoints for different financial data types
- Designed the tools needed:Stock overview information (current price, company details)Technical analysis with indicators (RSI, MACD, etc.)Fundamental analysis (financial statements, ratios)Earnings report dataNews and sentiment analysis
- Planned data formatting:Clean, well-formatted markdown outputTables for structured dataVisual indicators (‚Üë/‚Üì) for trendsProper formatting of financial numbers

- First, we configured the MCP server in the settings:

- Then we tested each tool individually:

- API Rate Limiting:Challenge: Free tier limited to 5 calls per minuteSolution: Implemented queuing, enforced rate limits, and added comprehensive caching
- Data Formatting:Challenge: Raw API data not user-friendlySolution: Created formatting utilities for consistent display of financial data
- Timeout Issues:Challenge: Complex tools making multiple API calls could timeoutSolution: Suggested breaking complex tools into smaller pieces, optimizing caching

- Plan for API Limits: Understand and design around API rate limits from the beginning
- Cache Strategically: Identify high-value caching opportunities to improve performance
- Format for Readability: Invest in good data formatting for improved user experience
- Test Every Path: Test all tools individually before completion
- Handle API Complexity: For APIs requiring multiple calls, design tools with simpler scopes

- Define the resourcesyour server will expose:

- Implement read handlersto deliver the content:


CODE EXAMPLES:
```
.clinerules
```

```
.clinerules
```

```
.clinerules
```

```
.clinerules
```

```
# MCP Server Development Protocol‚ö†Ô∏è CRITICAL: DO NOT USE attempt_completion BEFORE TESTING ‚ö†Ô∏è## Step 1: Planning (PLAN MODE)- What problem does this tool solve?- What API/service will it use?- What are the authentication requirements?‚ñ° Standard API key‚ñ° OAuth (requires separate setup script)‚ñ° Other credentials## Step 2: Implementation (ACT MODE)1. Bootstrap- For web services, JavaScript integration, or Node.js environments:```bashnpx @modelcontextprotocol/create-server my-servercd my-servernpm install```- For data science, ML workflows, or Python environments:```bashpip install mcp# Or with uv (recommended)uv add "mcp[cli]"```2. Core Implementation- Use MCP SDK- Implement comprehensive logging- TypeScript (for web/JS projects):```typescriptconsole.error('[Setup] Initializing server...');console.error('[API] Request to endpoint:', endpoint);console.error('[Error] Failed with:', error);```- Python (for data science/ML projects):```pythonimport logginglogging.error('[Setup] Initializing server...')logging.error(f'[API] Request to endpoint: {endpoint}')logging.error(f'[Error] Failed with: {str(error)}')```- Add type definitions- Handle errors with context- Implement rate limiting if needed3. Configuration- Get credentials from user if needed- Add to MCP settings:- For TypeScript projects:```json{"mcpServers": {"my-server": {"command": "node","args": ["path/to/build/index.js"],"env": {"API_KEY": "key"},"disabled": false,"autoApprove": []}}}```- For Python projects:```bash# Directly with command linemcp install server.py -v API_KEY=key# Or in settings.json{"mcpServers": {"my-server": {"command": "python","args": ["server.py"],"env": {"API_KEY": "key"},"disabled": false,"autoApprove": []}}}```## Step 3: Testing (BLOCKER ‚õîÔ∏è)<thinking>BEFORE using attempt_completion, I MUST verify:‚ñ° Have I tested EVERY tool?‚ñ° Have I confirmed success from the user for each test?‚ñ° Have I documented the test results?If ANY answer is "no", I MUST NOT use attempt_completion.</thinking>1. Test Each Tool (REQUIRED)‚ñ° Test each tool with valid inputs‚ñ° Verify output format is correct‚ö†Ô∏è DO NOT PROCEED UNTIL ALL TOOLS TESTED## Step 4: Completion‚ùó STOP AND VERIFY:‚ñ° Every tool has been tested with valid inputs‚ñ° Output format is correct for each toolOnly after ALL tools have been tested can attempt_completion be used.## Key Requirements- ‚úì Must use MCP SDK- ‚úì Must have comprehensive logging- ‚úì Must test each tool individually- ‚úì Must handle errors gracefully- ‚õîÔ∏è NEVER skip testing before completion
```

```
.clinerules
```

```
.clinerules
```

```
.clinerules
```

```
I want to build an MCP server for the AlphaAdvantage financial API.It should allow me to get real-time stock data, perform technicalanalysis, and retrieve company financial information.
```

```
Here's the API documentation for the service:[Paste API documentation here]
```

```
npx @modelcontextprotocol/create-server alphaadvantage-mcpcd alphaadvantage-mcpnpm install axios node-cache
```

```
src/‚îú‚îÄ‚îÄ api/‚îÇ   ‚îî‚îÄ‚îÄ alphaAdvantageClient.ts  # API client with rate limiting & caching‚îú‚îÄ‚îÄ formatters/‚îÇ   ‚îî‚îÄ‚îÄ markdownFormatter.ts     # Output formatters for clean markdown‚îî‚îÄ‚îÄ index.ts                     # Main MCP server implementation
```

```
/*** Manage rate limiting based on free tier (5 calls per minute)*/private async enforceRateLimit() {if (this.requestsThisMinute >= 5) {console.error("[Rate Limit] Rate limit reached. Waiting for next minute...");return new Promise<void>((resolve) => {const remainingMs = 60 * 1000 - (Date.now() % (60 * 1000));setTimeout(resolve, remainingMs + 100); // Add 100ms buffer});}this.requestsThisMinute++;return Promise.resolve();}
```

```
/*** Format company overview into markdown*/export function formatStockOverview(overviewData: any, quoteData: any): string {// Extract dataconst overview = overviewData;const quote = quoteData["Global Quote"];// Calculate price changeconst currentPrice = parseFloat(quote["05. price"] || "0");const priceChange = parseFloat(quote["09. change"] || "0");const changePercent = parseFloat(quote["10. change percent"]?.replace("%", "") || "0");// Format markdownlet markdown = `# ${overview.Symbol} (${overview.Name}) - ${formatCurrency(currentPrice)} ${addTrendIndicator(priceChange)}${changePercent > 0 ? '+' : ''}${changePercent.toFixed(2)}%\n\n`;// Add more details...return markdown;}
```

```
server.setRequestHandler(ListToolsRequestSchema, async () => {console.error("[Setup] Listing available tools");return {tools: [{name: "get_stock_overview",description: "Get basic company info and current quote for a stock symbol",inputSchema: {type: "object",properties: {symbol: {type: "string",description: "Stock symbol (e.g., 'AAPL')"},market: {type: "string",description: "Optional market (e.g., 'US')",default: "US"}},required: ["symbol"]}},// Additional tools defined here...]};});
```

```
{"mcpServers": {"alphaadvantage-mcp": {"command": "node","args": ["/path/to/alphaadvantage-mcp/build/index.js"],"env": {"ALPHAVANTAGE_API_KEY": "YOUR_API_KEY"},"disabled": false,"autoApprove": []}}}
```

```
# AAPL (Apple Inc) - $241.84 ‚Üë+1.91%**Sector:** TECHNOLOGY**Industry:** ELECTRONIC COMPUTERS**Market Cap:** 3.63T**P/E Ratio:** 38.26...
```

```
# Technical Analysis: AAPL## Daily Price ActionCurrent Price: $241.84 (‚Üë$4.54, +1.91%)### Recent Daily Prices| Date | Open | High | Low | Close | Volume ||------|------|------|-----|-------|--------|| 2025-02-28 | $236.95 | $242.09 | $230.20 | $241.84 | 56.83M |...
```

```
# Earnings Report: MSFT (Microsoft Corporation)**Sector:** TECHNOLOGY**Industry:** SERVICES-PREPACKAGED SOFTWARE**Current EPS:** $12.43## Recent Quarterly Earnings| Quarter | Date | EPS Estimate | EPS Actual | Surprise % ||---------|------|-------------|------------|------------|| 2024-12-31 | 2025-01-29 | $3.11 | $3.23 | ‚Üë4.01% |...
```

```
// Start-up loggingconsole.error('[Setup] Initializing AlphaAdvantage MCP server...');// API request loggingconsole.error(`[API] Getting stock overview for ${symbol}`);// Error handling with contextconsole.error(`[Error] Tool execution failed: ${error.message}`);// Cache operationsconsole.error(`[Cache] Using cached data for: ${cacheKey}`);
```

```
export interface AlphaAdvantageConfig {apiKey: string;cacheTTL?: Partial<typeof DEFAULT_CACHE_TTL>;baseURL?: string;}/*** Validate that a stock symbol is provided and looks valid*/function validateSymbol(symbol: unknown): asserts symbol is string {if (typeof symbol !== "string" || symbol.trim() === "") {throw new McpError(ErrorCode.InvalidParams, "A valid stock symbol is required");}// Basic symbol validation (letters, numbers, dots)const symbolRegex = /^[A-Za-z0-9.]+$/;if (!symbolRegex.test(symbol)) {throw new McpError(ErrorCode.InvalidParams, `Invalid stock symbol: ${symbol}`);}}
```

```
// Default cache TTL in secondsconst DEFAULT_CACHE_TTL = {STOCK_OVERVIEW: 60 * 60, // 1 hourTECHNICAL_ANALYSIS: 60 * 30, // 30 minutesFUNDAMENTAL_ANALYSIS: 60 * 60 * 24, // 24 hoursEARNINGS_REPORT: 60 * 60 * 24, // 24 hoursNEWS: 60 * 15, // 15 minutes};// Check cache firstconst cachedData = this.cache.get<T>(cacheKey);if (cachedData) {console.error(`[Cache] Using cached data for: ${cacheKey}`);return cachedData;}// Cache successful responsesthis.cache.set(cacheKey, response.data, cacheTTL);
```

```
try {switch (request.params.name) {case "get_stock_overview": {// Implementation...}// Other cases...default:throw new McpError(ErrorCode.MethodNotFound, `Unknown tool: ${request.params.name}`);}} catch (error) {console.error(`[Error] Tool execution failed: ${error instanceof Error ? error.message : String(error)}`);if (error instanceof McpError) {throw error;}return {content: [{type: "text",text: `Error: ${error instanceof Error ? error.message : String(error)}`}],isError: true};}
```

```
server.setRequestHandler(ListResourcesRequestSchema, async () => {return {resources: [{uri: "file:///project/readme.md",name: "Project README",mimeType: "text/markdown"}]};});
```

```
server.setRequestHandler(ReadResourceRequestSchema, async (request) => {if (request.params.uri === "file:///project/readme.md") {const content = await fs.promises.readFile("/path/to/readme.md", "utf-8");return {contents: [{uri: request.params.uri,mimeType: "text/markdown",text: content}]};}throw new Error("Resource not found");});
```

```
// Authenticate using API key from environmentconst API_KEY = process.env.ALPHAVANTAGE_API_KEY;if (!API_KEY) {console.error("[Error] Missing ALPHAVANTAGE_API_KEY environment variable");process.exit(1);}// Initialize API clientconst apiClient = new AlphaAdvantageClient({apiKey: API_KEY});
```

```
if (this.requestsThisMinute >= 5) {console.error("[Rate Limit] Rate limit reached. Waiting for next minute...");return new Promise<void>((resolve) => {const remainingMs = 60 * 1000 - (Date.now() % (60 * 1000));setTimeout(resolve, remainingMs + 100); // Add 100ms buffer});}
```



==================================================
PAGE: custom-model-configs/aws-bedrock
URL: https://docs.cline.bot/custom-model-configs/aws-bedrock
==================================================

TITLE: AWS Bedrock w/ Credentials Authentication | Cline


H1 HEADINGS:
AWS Bedrock w/ Credentials Authentication

H3 HEADINGS:
Overview
Step 1: Prepare Your AWS Environment
Step 2: Verify Regional and Model Access
Step 3: Configure the Cline VS Code Extension
Step 4: Security, Monitoring, and Best Practices
Conclusion

H4 HEADINGS:
1.1 Create or Use an IAM Role/User
1.2 Attach the Required Policies
2.1 Choose and Confirm a Region
2.2 Set Up AWS Marketplace Subscriptions (if needed)
3.1 Install and Open Cline
3.2 Configure Cline Settings

CONTENT:
Last updated16 days ago

AWS Bedrock:A fully managed service that offers access to leading generative AI models (e.g., Anthropic Claude, Amazon Titan) through AWS..

Cline:A VS Code extension that acts as a coding assistant by integrating with AI models‚Äîempowering developers to generate code, debug, and analyze data.

Enterprise Focus:This guide is tailored for organizations with established AWS environments (using IAM roles, AWS SSO, AWS Organizations, etc.) to ensure secure and compliant usage.

Sign in to the AWS Management Console:

Access IAM:

Search forIAM (Identity and Access Management)in the AWS Console.

Either create a new IAM user or use your enterprise‚Äôs AWS SSO to assume a dedicated role for Bedrock access.

Attach the Managed Policy:

Attach theAmazonBedrockFullAccessmanaged policy to your user/role.

Confirm Additional Permissions:

Ensure your policy includes permissions for model invocation (e.g.,bedrock:InvokeModelandbedrock:InvokeModelWithResponseStream), model listing, and AWS Marketplace actions (likeaws-marketplace:Subscribe).

Enterprise Tip:Apply least-privilege practices by scoping resource ARNs and usingto restrict access where necessary.

Verify Model Access:

In the AWS Bedrock console, confirm that the models your team requires (e.g., Anthropic Claude, Amazon Titan) are marked as ‚ÄúAccess granted.‚Äù

Subscribe to Third-Party Models:

Navigate to the AWS Bedrock console and locate the model subscription section.

For models from third-party providers (e.g., Anthropic), accept the terms to subscribe.

Enterprise Tip:

Model subscriptions are often managed centrally. Confirm with your cloud team if a standard subscription process is in place.

Install the Cline Extension:

Open VS Code.

Go to the Extensions Marketplace (Ctrl+Shift+XorCmd+Shift+X).

Search forClineand install it.

Open Cline Settings:

Click on the settings ‚öôÔ∏è to select your API Provider.

Select AWS Bedrock as the API Provider:

From the API Provider dropdown, chooseAWS Bedrock.

Enter Your AWS Credentials:

Input yourAccess KeyandSecret Key(or use temporary credentials if using AWS SSO).

Specify the correctAWS Region(e.g.,us-east-1or your enterprise-approved region).

Select a Model:

Choose an on-demand model (e.g.,anthropic.claude-3-5-sonnet-20241022-v2:0).

Save and Test:

ClickDone/Saveto apply your settings.

Test the integration by sending a simple prompt (e.g., ‚ÄúGenerate a Python function to check if a number is prime.‚Äù).

Secure Access:

Prefer AWS SSO/federated roles over long-lived IAM credentials.

Enhance Network Security:

Monitor and Log Activity:

Enable AWS CloudTrail to log Bedrock API calls.

Use CloudWatch to monitor metrics like invocation count, latency, and token usage.

Set up alerts for abnormal activity.

Handle Errors and Manage Costs:

Implement exponential backoff for throttling errors.

Regular Audits and Compliance:

Periodically review IAM roles and CloudTrail logs.

Follow internal data privacy and governance policies.

By following these steps, your enterprise team can securely integrate AWS Bedrock with the Cline VS Code extension to accelerate development:

Prepare Your AWS Environment:Create or use a secure IAM role/user, attach theAmazonBedrockFullAccesspolicy, and ensure necessary permissions.

Verify Region and Model Access:Confirm that your selected region supports your required models and subscribe via AWS Marketplace if needed.

Configure Cline in VS Code:Install and set up Cline with your AWS credentials and choose an appropriate model.

Implement Security and Monitoring:Use best practices for IAM, network security, monitoring, and cost management.

This guide will be updated as AWS Bedrock and Cline evolve. Always refer to the latest documentation and internal policies for up-to-date practices.

Select a Region:AWS Bedrock is available in multiple regions (e.g., US East, Europe, Asia Pacific). Choose the region that meets your latency and compliance needs.

Note:Some advanced models might require anif not available on-demand.

Install VS Code:Download from the.

Consider setting upto securely connect to Bedrock.

Use AWS Cost Explorer and set billing alerts to track usage.

For further details, consult theand coordinate with your internal cloud team. Happy coding!


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Overview
- Step 1: Prepare Your AWS Environment
- Step 2: Verify Regional and Model Access
- Step 3: Configure the Cline VS Code Extension
- Step 4: Security, Monitoring, and Best Practices
- Conclusion

- AWS Bedrock:A fully managed service that offers access to leading generative AI models (e.g., Anthropic Claude, Amazon Titan) through AWS..
- Cline:A VS Code extension that acts as a coding assistant by integrating with AI models‚Äîempowering developers to generate code, debug, and analyze data.
- Enterprise Focus:This guide is tailored for organizations with established AWS environments (using IAM roles, AWS SSO, AWS Organizations, etc.) to ensure secure and compliant usage.

- Search forIAM (Identity and Access Management)in the AWS Console.
- Either create a new IAM user or use your enterprise‚Äôs AWS SSO to assume a dedicated role for Bedrock access.
- 

- Attach theAmazonBedrockFullAccessmanaged policy to your user/role.

- Ensure your policy includes permissions for model invocation (e.g.,bedrock:InvokeModelandbedrock:InvokeModelWithResponseStream), model listing, and AWS Marketplace actions (likeaws-marketplace:Subscribe).
- Enterprise Tip:Apply least-privilege practices by scoping resource ARNs and usingto restrict access where necessary.

- In the AWS Bedrock console, confirm that the models your team requires (e.g., Anthropic Claude, Amazon Titan) are marked as ‚ÄúAccess granted.‚Äù
- 

- Navigate to the AWS Bedrock console and locate the model subscription section.
- For models from third-party providers (e.g., Anthropic), accept the terms to subscribe.
- 

- Model subscriptions are often managed centrally. Confirm with your cloud team if a standard subscription process is in place.

- Open VS Code.
- Go to the Extensions Marketplace (Ctrl+Shift+XorCmd+Shift+X).
- Search forClineand install it.

- Click on the settings ‚öôÔ∏è to select your API Provider.

- From the API Provider dropdown, chooseAWS Bedrock.

- Input yourAccess KeyandSecret Key(or use temporary credentials if using AWS SSO).
- Specify the correctAWS Region(e.g.,us-east-1or your enterprise-approved region).

- Choose an on-demand model (e.g.,anthropic.claude-3-5-sonnet-20241022-v2:0).

- ClickDone/Saveto apply your settings.
- Test the integration by sending a simple prompt (e.g., ‚ÄúGenerate a Python function to check if a number is prime.‚Äù).

- Prefer AWS SSO/federated roles over long-lived IAM credentials.
- 

- Enable AWS CloudTrail to log Bedrock API calls.
- Use CloudWatch to monitor metrics like invocation count, latency, and token usage.
- Set up alerts for abnormal activity.

- Implement exponential backoff for throttling errors.
- 

- Periodically review IAM roles and CloudTrail logs.
- Follow internal data privacy and governance policies.


LISTS:
- Custom Model Configs

- Sign in to the AWS Management Console:
- Access IAM:Search forIAM (Identity and Access Management)in the AWS Console.Either create a new IAM user or use your enterprise‚Äôs AWS SSO to assume a dedicated role for Bedrock access.

- Attach the Managed Policy:Attach theAmazonBedrockFullAccessmanaged policy to your user/role.
- Confirm Additional Permissions:Ensure your policy includes permissions for model invocation (e.g.,bedrock:InvokeModelandbedrock:InvokeModelWithResponseStream), model listing, and AWS Marketplace actions (likeaws-marketplace:Subscribe).Enterprise Tip:Apply least-privilege practices by scoping resource ARNs and usingto restrict access where necessary.

- 
- Verify Model Access:In the AWS Bedrock console, confirm that the models your team requires (e.g., Anthropic Claude, Amazon Titan) are marked as ‚ÄúAccess granted.‚Äù

- Subscribe to Third-Party Models:Navigate to the AWS Bedrock console and locate the model subscription section.For models from third-party providers (e.g., Anthropic), accept the terms to subscribe.
- Enterprise Tip:Model subscriptions are often managed centrally. Confirm with your cloud team if a standard subscription process is in place.

- 
- Install the Cline Extension:Open VS Code.Go to the Extensions Marketplace (Ctrl+Shift+XorCmd+Shift+X).Search forClineand install it.

- Open Cline Settings:Click on the settings ‚öôÔ∏è to select your API Provider.
- Select AWS Bedrock as the API Provider:From the API Provider dropdown, chooseAWS Bedrock.
- Enter Your AWS Credentials:Input yourAccess KeyandSecret Key(or use temporary credentials if using AWS SSO).Specify the correctAWS Region(e.g.,us-east-1or your enterprise-approved region).
- Select a Model:Choose an on-demand model (e.g.,anthropic.claude-3-5-sonnet-20241022-v2:0).
- Save and Test:ClickDone/Saveto apply your settings.Test the integration by sending a simple prompt (e.g., ‚ÄúGenerate a Python function to check if a number is prime.‚Äù).

- Secure Access:Prefer AWS SSO/federated roles over long-lived IAM credentials.
- Enhance Network Security:
- Monitor and Log Activity:Enable AWS CloudTrail to log Bedrock API calls.Use CloudWatch to monitor metrics like invocation count, latency, and token usage.Set up alerts for abnormal activity.
- Handle Errors and Manage Costs:Implement exponential backoff for throttling errors.
- Regular Audits and Compliance:Periodically review IAM roles and CloudTrail logs.Follow internal data privacy and governance policies.

- Prepare Your AWS Environment:Create or use a secure IAM role/user, attach theAmazonBedrockFullAccesspolicy, and ensure necessary permissions.
- Verify Region and Model Access:Confirm that your selected region supports your required models and subscribe via AWS Marketplace if needed.
- Configure Cline in VS Code:Install and set up Cline with your AWS credentials and choose an appropriate model.
- Implement Security and Monitoring:Use best practices for IAM, network security, monitoring, and cost management.


CODE EXAMPLES:
```
AmazonBedrockFullAccess
```

```
bedrock:InvokeModel
```

```
bedrock:InvokeModelWithResponseStream
```

```
aws-marketplace:Subscribe
```

```
Ctrl+Shift+X
```

```
Cmd+Shift+X
```

```
us-east-1
```

```
AmazonBedrockFullAccess
```



==================================================
PAGE: custom-model-configs/aws-bedrock-w-profile-authentication
URL: https://docs.cline.bot/custom-model-configs/aws-bedrock-w-profile-authentication
==================================================

TITLE: AWS Bedrock w/ Profile Authentication | Cline


H1 HEADINGS:
AWS Bedrock w/ Profile Authentication

H2 HEADINGS:
Configuring AWS Bedrock to use AWS Profiles for Authentication

H4 HEADINGS:
Cline offers the option of utilizing AWS credentials or AWS profiles to access AWS Bedrock services. SSO/Federated roles are suggested over Legacy IAM configuration; this guide describes how to configure your environment so that Cline uses SSO roles for authentication.

CONTENT:
Last updated16 days ago

Install theof AWS CLI

Follow the AWS docs to install your OS-specific version of AWS CLI

with the AWS CLI

If you do not already have AWS access through the IAM Identity Center, follow theto set up IAM users and roles. Ensure you have aPowerUserAccessrole.

If you have access to AWS through your employer, open your AWS access portal and find the appropriate account. Ensure you havePowerUserAccesspermissions.

Open theAccess keyslink and note theSSO start URLandSSO region, which are needed in the next step

Continue configuring your profile using

Once configured, use the following command to authenticate the AWS  CLI: `aws sso login --profile <AWS-profile-name>

Note which profile name you attach to your  AWS account, this is needed to configure Cline in the following steps

If you haven't already done so, install VSCode and the Cline extension. Consult theGetting Startedpage for guidance.

Open the Cline extension, then click on the settings button ‚öôÔ∏è to select your API Provider.

From the API Provider dropdown, select AWS Bedrock

Select the AWS Profile radio button, then enter the AWS Profile Name from step 3

Select your AWS Region from the dropdown menu

Selecting the cross-region inference checkbox is required for some models


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Follow the AWS docs to install your OS-specific version of AWS CLI

- If you do not already have AWS access through the IAM Identity Center, follow theto set up IAM users and roles. Ensure you have aPowerUserAccessrole.
- If you have access to AWS through your employer, open your AWS access portal and find the appropriate account. Ensure you havePowerUserAccesspermissions.
- Open theAccess keyslink and note theSSO start URLandSSO region, which are needed in the next step

- Once configured, use the following command to authenticate the AWS  CLI: `aws sso login --profile <AWS-profile-name>
- Note which profile name you attach to your  AWS account, this is needed to configure Cline in the following steps

- From the API Provider dropdown, select AWS Bedrock
- Select the AWS Profile radio button, then enter the AWS Profile Name from step 3
- Select your AWS Region from the dropdown menu
- Selecting the cross-region inference checkbox is required for some models


LISTS:
- Custom Model Configs

- Install theof AWS CLIFollow the AWS docs to install your OS-specific version of AWS CLI
- with the AWS CLIIf you do not already have AWS access through the IAM Identity Center, follow theto set up IAM users and roles. Ensure you have aPowerUserAccessrole.If you have access to AWS through your employer, open your AWS access portal and find the appropriate account. Ensure you havePowerUserAccesspermissions.Open theAccess keyslink and note theSSO start URLandSSO region, which are needed in the next step
- Continue configuring your profile usingOnce configured, use the following command to authenticate the AWS  CLI: `aws sso login --profile <AWS-profile-name>Note which profile name you attach to your  AWS account, this is needed to configure Cline in the following steps
- If you haven't already done so, install VSCode and the Cline extension. Consult theGetting Startedpage for guidance.
- Open the Cline extension, then click on the settings button ‚öôÔ∏è to select your API Provider.From the API Provider dropdown, select AWS BedrockSelect the AWS Profile radio button, then enter the AWS Profile Name from step 3Select your AWS Region from the dropdown menuSelecting the cross-region inference checkbox is required for some models


CODE EXAMPLES:
```
PowerUserAccess
```

```
PowerUserAccess
```

```
Access keys
```

```
SSO start URL
```

```
SSO region
```

```
aws sso login --profile <AWS-profile-name>
```

```
aws configure sso
```



==================================================
PAGE: custom-model-configs/gcp-vertex-ai
URL: https://docs.cline.bot/custom-model-configs/gcp-vertex-ai
==================================================

TITLE: GCP Vertex AI | Cline


H1 HEADINGS:
GCP Vertex AI

H3 HEADINGS:
Step 1: Prepare Your GCP Environment
Step 2: Verify Regional and Model Access
Step 3: Configure the Cline VS Code Extension
Step 4: Authentication and Credentials Setup
Step 5: Security, Monitoring, and Best Practices
Conclusion

H4 HEADINGS:
1.1 Create or Use a GCP Project
1.2 Set Up IAM Permissions and Service Accounts
2.1 Choose and Confirm a Region
2.2 Enable the Claude 3.5 Sonnet v2 Model
3.1 Install and Open Cline
3.2 Configure Cline Settings
Option A: Using Your Google Account (User Credentials)
Option B: Using a Service Account (JSON Key)
5.1 Enforce Least Privilege
5.2 Manage Resource Access
5.3 Monitor Usage and Quotas
5.4 Service Agents and Cross-Project Considerations

CONTENT:
Last updated16 days ago

Overview

GCP Vertex AI:A fully managed service that provides access to leading generative AI models‚Äîsuch as Anthropic‚Äôs Claude 3.5 Sonnet v2‚Äîthrough Google Cloud..

This guide is tailored for organizations with established GCP environments (leveraging IAM roles, service accounts, and best practices in resource management) to ensure secure and compliant usage.

Sign in to the GCP Console:.

Select or Create a Project:Use an existing project or create a new one dedicated to Vertex AI.

(Screenshot suggestion: Project selection/creation screen in the GCP Console)

Assign Required Roles:

Grant your user (or service account) theVertex AI Userrole (roles/aiplatform.user).

For service accounts, also attach theVertex AI Service Agentrole (roles/aiplatform.serviceAgent) to enable certain operations.

Consider additional predefined roles as needed:

Vertex AI Platform Express Admin

Vertex AI Platform Express User

Vertex AI Migration Service User

(Screenshot suggestion: IAM console showing role assignments)

Cross-Project Resource Access:

For BigQuery tables in different projects, assign theBigQuery Data Viewerrole.

For Cloud Storage buckets in different projects, assign theStorage Object Viewerrole.

For external data sources, refer to the.

Vertex AI supports eight regions. Select a region that meets your latency, compliance, and capacity needs. Examples include:

us-east5 (Columbus, Ohio)

us-east1 (South Carolina)

us-east4 (Northern Virginia)

us-central1 (Iowa)

us-west1 (The Dalles, Oregon)

us-west4 (Las Vegas, Nevada)

europe-west1 (Belgium)

asia-southeast1 (Singapore)

(Screenshot suggestion: List or map of supported regions in the Vertex AI dashboard)

Open Vertex AI Model Garden:In the Cloud Console, navigate toVertex AI ‚Üí Model Garden.

Enable Claude 3.5 Sonnet v2:Locate the model card for Claude 3.5 Sonnet v2 and clickEnable.

(Screenshot suggestion: Model Garden showing the Claude 3.5 Sonnet v2 model card with the Enable button)

Install the Cline Extension:

Open VS Code.

Navigate to the Extensions Marketplace (Ctrl+Shift+X or Cmd+Shift+X).

Search forClineand install the extension.

Open Cline Settings:Click the settings ‚öôÔ∏è icon within the Cline extension.

Set API Provider:ChooseGCP Vertex AIfrom the API Provider dropdown.

Enter Your Google Cloud Project ID:Provide the project ID you set up earlier.

Select the Region:Choose one of the supported regions (e.g.,us-east5).

Select the Model:From the available list, chooseClaude 3.5 Sonnet v2.

Save and Test:Save your settings and test by sending a simple prompt (e.g., ‚ÄúGenerate a Python function to check if a number is prime.‚Äù).

(Screenshot suggestion: Cline settings showing project ID, region, and model selection)

Initialize and Authenticate:

This sets up Application Default Credentials (ADC) using your Google account.

(Screenshot suggestion: Terminal output for successfulgcloud auth application-default login)

Restart VS Code:Ensure VS Code is restarted so that the Cline extension picks up the new credentials.

Create a Service Account:

In the GCP Console, navigate toIAM & Admin > Service Accounts.

Create a new service account (e.g., ‚Äúvertex-ai-client‚Äù).

Assign Roles:

AttachVertex AI User(roles/aiplatform.user).

AttachVertex AI Service Agent(roles/aiplatform.serviceAgent).

Optionally, add other roles as required.

(Screenshot suggestion: Creating a service account with role assignments)

Generate a JSON Key:

In the Service Accounts section, manage keys for your service account and download the JSON key.

Set the Environment Variable:

This instructs Google Cloud client libraries (and Cline) to use this key.

(Screenshot suggestion: Terminal showing the export command)

Restart VS Code:Launch VS Code from a terminal where theGOOGLE_APPLICATION_CREDENTIALSvariable is set.

Principle of Least Privilege:Only grant the minimum necessary permissions. Custom roles can offer finer control compared to broad predefined roles.

Project vs. Resource-Level Access:Access can be managed at both levels. Note that resource-level permissions (e.g., for BigQuery or Cloud Storage) add to, but do not override, project-level policies.

Model Observability Dashboard:

In the Vertex AI Console, navigate to theModel Observabilitydashboard.

Monitor metrics such as request throughput, latency, and error rates (including 429 quota errors).

(Screenshot suggestion: Model Observability dashboard with error metrics highlighted)

Quota Management:

If you encounter 429 errors, check theIAM & Admin > Quotaspage.

Service Agents:Be aware of the different service agents:

Vertex AI Service Agent

Vertex AI RAG Data Service Agent

Vertex AI Custom Code Service Agent

Vertex AI Extension Service Agent

Cross-Project Access:For resources in other projects (e.g., BigQuery, Cloud Storage), ensure that the appropriate roles (BigQuery Data Viewer, Storage Object Viewer) are assigned.

By following these steps, your enterprise team can securely integrate GCP Vertex AI with the Cline VS Code extension to harness the power ofClaude 3.5 Sonnet v2:

Prepare Your GCP Environment:Create or use a project, configure IAM with least privilege, and ensure necessary roles (including the Vertex AI Service Agent role) are attached.

Verify Regional and Model Access:Confirm that your chosen region supports Claude 3.5 Sonnet v2 and that the model is enabled.

Configure Cline in VS Code:Install Cline, enter your project ID, select the appropriate region, and choose the model.

Set Up Authentication:Use either user credentials (viagcloud auth application-default login) or a service account with a JSON key.

Implement Security and Monitoring:Adhere to best practices for IAM, manage resource access carefully, and monitor usage with the Model Observability dashboard.

This guide will be updated as GCP Vertex AI and Cline evolve. Always refer to the latest documentation for current practices.

Download VS Code:.

Install the Google Cloud CLI:Follow the.

Best Practices:Refer to.

Request a quota increase if necessary..

For further details, please consult theand your internal security policies.
Happy coding!


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- Step 1: Prepare Your GCP Environment
- Step 2: Verify Regional and Model Access
- Step 3: Configure the Cline VS Code Extension
- Step 4: Authentication and Credentials Setup
- Step 5: Security, Monitoring, and Best Practices
- Conclusion

- Sign in to the GCP Console:.
- Select or Create a Project:Use an existing project or create a new one dedicated to Vertex AI.(Screenshot suggestion: Project selection/creation screen in the GCP Console)

- Assign Required Roles:Grant your user (or service account) theVertex AI Userrole (roles/aiplatform.user).For service accounts, also attach theVertex AI Service Agentrole (roles/aiplatform.serviceAgent) to enable certain operations.Consider additional predefined roles as needed:Vertex AI Platform Express AdminVertex AI Platform Express UserVertex AI Migration Service User(Screenshot suggestion: IAM console showing role assignments)
- Cross-Project Resource Access:For BigQuery tables in different projects, assign theBigQuery Data Viewerrole.For Cloud Storage buckets in different projects, assign theStorage Object Viewerrole.For external data sources, refer to the.

- Grant your user (or service account) theVertex AI Userrole (roles/aiplatform.user).
- For service accounts, also attach theVertex AI Service Agentrole (roles/aiplatform.serviceAgent) to enable certain operations.
- Consider additional predefined roles as needed:Vertex AI Platform Express AdminVertex AI Platform Express UserVertex AI Migration Service User

- Vertex AI Platform Express Admin
- Vertex AI Platform Express User
- Vertex AI Migration Service User

- For BigQuery tables in different projects, assign theBigQuery Data Viewerrole.
- For Cloud Storage buckets in different projects, assign theStorage Object Viewerrole.
- For external data sources, refer to the.

- us-east5 (Columbus, Ohio)
- us-east1 (South Carolina)
- us-east4 (Northern Virginia)
- us-central1 (Iowa)
- us-west1 (The Dalles, Oregon)
- us-west4 (Las Vegas, Nevada)
- europe-west1 (Belgium)
- asia-southeast1 (Singapore)

- Open Vertex AI Model Garden:In the Cloud Console, navigate toVertex AI ‚Üí Model Garden.
- Enable Claude 3.5 Sonnet v2:Locate the model card for Claude 3.5 Sonnet v2 and clickEnable.(Screenshot suggestion: Model Garden showing the Claude 3.5 Sonnet v2 model card with the Enable button)

- 
- Install the Cline Extension:Open VS Code.Navigate to the Extensions Marketplace (Ctrl+Shift+X or Cmd+Shift+X).Search forClineand install the extension.

- Open VS Code.
- Navigate to the Extensions Marketplace (Ctrl+Shift+X or Cmd+Shift+X).
- Search forClineand install the extension.

- Open Cline Settings:Click the settings ‚öôÔ∏è icon within the Cline extension.
- Set API Provider:ChooseGCP Vertex AIfrom the API Provider dropdown.
- Enter Your Google Cloud Project ID:Provide the project ID you set up earlier.
- Select the Region:Choose one of the supported regions (e.g.,us-east5).
- Select the Model:From the available list, chooseClaude 3.5 Sonnet v2.
- Save and Test:Save your settings and test by sending a simple prompt (e.g., ‚ÄúGenerate a Python function to check if a number is prime.‚Äù).(Screenshot suggestion: Cline settings showing project ID, region, and model selection)

- This sets up Application Default Credentials (ADC) using your Google account.

- In the GCP Console, navigate toIAM & Admin > Service Accounts.
- Create a new service account (e.g., ‚Äúvertex-ai-client‚Äù).

- AttachVertex AI User(roles/aiplatform.user).
- AttachVertex AI Service Agent(roles/aiplatform.serviceAgent).
- Optionally, add other roles as required.

- In the Service Accounts section, manage keys for your service account and download the JSON key.

- This instructs Google Cloud client libraries (and Cline) to use this key.

- Principle of Least Privilege:Only grant the minimum necessary permissions. Custom roles can offer finer control compared to broad predefined roles.
- 

- Project vs. Resource-Level Access:Access can be managed at both levels. Note that resource-level permissions (e.g., for BigQuery or Cloud Storage) add to, but do not override, project-level policies.

- Model Observability Dashboard:In the Vertex AI Console, navigate to theModel Observabilitydashboard.Monitor metrics such as request throughput, latency, and error rates (including 429 quota errors).(Screenshot suggestion: Model Observability dashboard with error metrics highlighted)
- Quota Management:If you encounter 429 errors, check theIAM & Admin > Quotaspage.

- In the Vertex AI Console, navigate to theModel Observabilitydashboard.
- Monitor metrics such as request throughput, latency, and error rates (including 429 quota errors).

- If you encounter 429 errors, check theIAM & Admin > Quotaspage.
- 

- Service Agents:Be aware of the different service agents:Vertex AI Service AgentVertex AI RAG Data Service AgentVertex AI Custom Code Service AgentVertex AI Extension Service Agent
- Cross-Project Access:For resources in other projects (e.g., BigQuery, Cloud Storage), ensure that the appropriate roles (BigQuery Data Viewer, Storage Object Viewer) are assigned.

- Vertex AI Service Agent
- Vertex AI RAG Data Service Agent
- Vertex AI Custom Code Service Agent
- Vertex AI Extension Service Agent

- Prepare Your GCP Environment:Create or use a project, configure IAM with least privilege, and ensure necessary roles (including the Vertex AI Service Agent role) are attached.
- Verify Regional and Model Access:Confirm that your chosen region supports Claude 3.5 Sonnet v2 and that the model is enabled.
- Configure Cline in VS Code:Install Cline, enter your project ID, select the appropriate region, and choose the model.
- Set Up Authentication:Use either user credentials (viagcloud auth application-default login) or a service account with a JSON key.
- Implement Security and Monitoring:Adhere to best practices for IAM, manage resource access carefully, and monitor usage with the Model Observability dashboard.


LISTS:
- Custom Model Configs

- 
- Initialize and Authenticate:Copygcloud initgcloud auth application-default login

- Restart VS Code:Ensure VS Code is restarted so that the Cline extension picks up the new credentials.

- Create a Service Account:In the GCP Console, navigate toIAM & Admin > Service Accounts.Create a new service account (e.g., ‚Äúvertex-ai-client‚Äù).
- Assign Roles:AttachVertex AI User(roles/aiplatform.user).AttachVertex AI Service Agent(roles/aiplatform.serviceAgent).Optionally, add other roles as required.(Screenshot suggestion: Creating a service account with role assignments)
- Generate a JSON Key:In the Service Accounts section, manage keys for your service account and download the JSON key.
- Set the Environment Variable:Copyexport GOOGLE_APPLICATION_CREDENTIALS="/path/to/your/service-account-key.json"This instructs Google Cloud client libraries (and Cline) to use this key.(Screenshot suggestion: Terminal showing the export command)
- Restart VS Code:Launch VS Code from a terminal where theGOOGLE_APPLICATION_CREDENTIALSvariable is set.


CODE EXAMPLES:
```
roles/aiplatform.user
```

```
roles/aiplatform.serviceAgent
```

```
us-east5
```

```
gcloud initgcloud auth application-default login
```

```
gcloud auth application-default login
```

```
roles/aiplatform.user
```

```
roles/aiplatform.serviceAgent
```

```
export GOOGLE_APPLICATION_CREDENTIALS="/path/to/your/service-account-key.json"
```

```
GOOGLE_APPLICATION_CREDENTIALS
```

```
gcloud auth application-default login
```

```

```



==================================================
PAGE: custom-model-configs/litellm-and-cline-using-codestral
URL: https://docs.cline.bot/custom-model-configs/litellm-and-cline-using-codestral
==================================================

TITLE: LiteLLM & Cline (using Codestral) | Cline


H1 HEADINGS:
LiteLLM & Cline (using Codestral)

H3 HEADINGS:
Using LiteLLM with Cline

H4 HEADINGS:
Prerequisites
Setup
Running the Demo
Getting Help

CONTENT:
Last updated17 days ago

This guide demonstrates how to run a demo for LiteLLM starting with the Codestral model for use with Cline.

installed to run the LiteLLM image locally

For this example config: A Codestral API Key (different from the Mistral API Keys)

Create a.envfile and fill in the appropriate field

Note: Although this is limited to localhost, it's a good practice set LITELLM_MASTER_KEY to something secure

Configuration

We'll need to create aconfig.yamlfile to contain our LiteLLM configuration. In this case we'll just have one model, 'codestral-latest' and label it 'codestral'

Startup the LiteLLM docker container

Setup Cline

Once the LiteLLM server is up and running you can set it up in Cline:

Base URL should behttp://0.0.0.0:4000/v1

API Key should be the one you set in.envfor LITELLM_MASTER_KEY

Model ID iscodestralor whatever you named it underconfig.yaml

Author: mdp


LISTS:
- Cline Documentation
- Getting StartedWhat is Cline?For New CodersInstalling ClineInstalling Dev EssentialsOur Favorite Tech StackContext ManagementModel Selection Guide
- Improving Your Prompting SkillsPrompt Engineering GuideCline Memory Bank
- Exploring Cline's ToolsCline Tools GuideCheckpointsPlan & Act Modes: A Guide to Effective AI DevelopmentNew Task ToolRemote Browser Support
- Enterprise SolutionsSecurity ConcernsCloud Provider IntegrationMCP ServersCustom Instructions
- MCP ServersMCP OverviewMCP MarketplaceAdding MCP Servers from GitHubConfiguring MCP ServersConnecting to a Remote ServerMCP Transport MechanismsMCP Server Development Protocol
- Custom Model ConfigsAWS Bedrock w/ Credentials AuthenticationAWS Bedrock w/ Profile AuthenticationGCP Vertex AILiteLLM & Cline (using Codestral)
- Running Models LocallyRead Me FirstOllamaLM Studio
- More InfoTelemetry

- What is Cline?
- For New Coders
- Installing Cline
- Installing Dev Essentials
- Our Favorite Tech Stack
- Context Management
- Model Selection Guide

- Prompt Engineering Guide
- Cline Memory Bank

- Cline Tools Guide
- Checkpoints
- Plan & Act Modes: A Guide to Effective AI Development
- New Task Tool
- Remote Browser Support

- Security Concerns
- Cloud Provider Integration
- MCP Servers
- Custom Instructions

- MCP Overview
- MCP Marketplace
- Adding MCP Servers from GitHub
- Configuring MCP Servers
- Connecting to a Remote Server
- MCP Transport Mechanisms
- MCP Server Development Protocol

- AWS Bedrock w/ Credentials Authentication
- AWS Bedrock w/ Profile Authentication
- GCP Vertex AI
- LiteLLM & Cline (using Codestral)

- Read Me First
- Ollama
- LM Studio

- Telemetry

- installed to run the LiteLLM image locally
- For this example config: A Codestral API Key (different from the Mistral API Keys)

- Base URL should behttp://0.0.0.0:4000/v1
- API Key should be the one you set in.envfor LITELLM_MASTER_KEY
- Model ID iscodestralor whatever you named it underconfig.yaml

- 
- 
- 


LISTS:
- Custom Model Configs

- Create a.envfile and fill in the appropriate field

- Configuration

- Startup the LiteLLM docker container

- Setup ClineOnce the LiteLLM server is up and running you can set it up in Cline:Base URL should behttp://0.0.0.0:4000/v1API Key should be the one you set in.envfor LITELLM_MASTER_KEYModel ID iscodestralor whatever you named it underconfig.yaml


CODE EXAMPLES:
```
.env
```

```
# Tip: Use the following command to generate a random alphanumeric key:# openssl rand -base64 32 | tr -dc 'A-Za-z0-9' | head -c 32LITELLM_MASTER_KEY=YOUR_LITELLM_MASTER_KEYCODESTRAL_API_KEY=YOUR_CODESTRAL_API_KEY
```

```
config.yaml
```

```
model_list:- model_name: codestrallitellm_params:model: codestral/codestral-latestapi_key: os.environ/CODESTRAL_API_KEY
```

```
docker run \--env-file .env \-v $(pwd)/config.yaml:/app/config.yaml \-p 127.0.0.1:4000:4000 \ghcr.io/berriai/litellm:main-latest \--config /app/config.yaml --detailed_debug
```

```
http://0.0.0.0:4000/v1
```

```
.env
```

```
codestral
```

```
config.yaml
```

